1.3 Introducing Express: The framework

Express is the E in MEAN. As Node.js is a platform, it doesn’t prescribe how it should be set up or used. This is one of its great strengths. But when creating websites and web applications there are quite a few common tasks that need doing every time. Express is a web application framework for Node.js that has been designed to do this in a well-tested and repeatable way.


1.3.1 Easing your server setup

As already noted, Node.js is a platform not a server. This allows you to get creative with your server setup and do things that other web servers can’t do. It also makes it harder to get a basic website up and running.

Express abstracts away this difficulty by setting up a web server to listen to incoming requests and return relevant responses. In addition, it also defines a directory structure. One of these folders is set up to serve static files in a nonblocking way—the last thing you want is for your application to have to wait when somebody else requests a CSS file! You could configure this yourself directly in Node.js, but Express does it for you.


1.3.2 Routing URLs to responses

One of the great features of Express is that it provides a really simple interface for directing an incoming URL to a certain piece of code. Whether this is going to serve a static HTML page, read from a database, or write to a database doesn’t really matter. The interface is simple and consistent.

What Express has done here is abstract away some of the complexity of doing this in native Node.js, to make code quicker to write and easier to maintain.


1.3.3 Views: HTML responses

It’s likely that you’ll want to respond to many of the requests to your application by sending some HTML to the browser. By now it will come as no surprise to you that Express makes this easier than it is in native Node.js.

Express provides support for a number of different templating engines that make it easier to build HTML pages in an intelligent way, using reusable components as well as data from your application. Express compiles these together and serves them to the browser as HTML.


1.3.4 Remembering visitors with session support

Being single-threaded, Node.js doesn’t remember a visitor from one request to the next. It doesn’t have a silo of RAM set aside just for you; it just sees a series of HTTP requests. HTTP is a stateless protocol, so there’s no concept of storing a session state there. As it stands, this makes it difficult to create a personalized experience in Node.js or have a secure area where a user has to log in—it’s not much use if the site forgets who you are on every page. You can do it, of course, but you have to code it yourself.

Or, you’ll never guess what: Express has an answer to this too! Express comes with the ability to use sessions so that you can identify individual visitors through multiple requests and pages. Thank you Express!

Sitting on top of Node.js, Express gives you a great helping hand and a sound starting point for building web applications. It abstracts away a number of complexities and repeatable tasks that most of us don’t need—or want—to worry about. We just want to build web applications.