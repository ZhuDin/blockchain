1.6 Supporting cast

The MEAN stack gives you everything you need for creating data-rich interactive web
applications, but you may want to use a few extra technologies to help you on the way.
You can use Twitter Bootstrap to help create a good user interface, Git to help manage
your code, and Heroku to help by hosting the application on a live URL. In later chapters 
we’ll look at incorporating these into the MEAN stack. Here, we’ll just cover briefly
what each can do for you. 


1.6.1 Twitter Bootstrap for user interface

In this book we’re going to use Twitter Bootstrap to create a responsive design with
minimal effort. It’s not essential for the stack, and if you’re building an application
from existing HTML or a specific design then you probably won’t want to add it in. But
we’re going to be building an application in a “rapid prototype” style, going from idea
to application with no external influences.

Bootstrap is a front-end framework that provides a wealth of help for creating a
great user interface. Among its features, Bootstrap provides a responsive grid system,
default styles for many interface components, and the ability to change the visual
appearance with themes.

RESPONSIVE GRID LAYOUT
In a responsive layout, you serve up a single HTML page that arranges itself differently 
on different devices. This is done through detecting the screen resolution rather
than trying to sniff out the actual device. Bootstrap targets four different pixel-width
breakpoints for their layouts, loosely aimed at phones, tablets, laptops, and external
monitors. So if you give a bit of thought to how you set up your HTML and CSS
classes, you can use one HTML file to give the same content in different layouts suited
to the screen size.

CSS CLASSES AND HTML COMPONENTS
Bootstrap comes with a set of predefined CSS classes that can create useful visual components. 
These include things like page headers, flash-message containers, labels and
badges, stylized lists … the list goes on! They’ve thought of a lot, and it really helps
you quickly build an application without having to spend too much time on the HTML
layout and CSS styling.

Teaching Bootstrap isn’t an aim of this book, but I’ll point out various features as
we’re using them.

ADDING THEMES FOR A DIFFERENT FEEL
Bootstrap has a default look and feel that provides a really neat baseline. This is so
commonly used that your site could end up looking like anybody else’s. Fortunately,
it’s possible to download themes for Bootstrap to give your application a different
twist. Downloading a theme is often as simple as replacing the Bootstrap CSS file with
a new one. We’ll use a free theme in this book to build our application, but it’s also
possible to buy premium themes from a number of sites online to give an application
a unique feel.


1.6.2 Git for source control

Saving code on your computer or a network drive is all very well and good, but that
only ever holds the current version. It also only lets you, or others on your network,
access it.

Git is a distributed revision control and source code management system. This
means that several people can work on the same codebase at the same time on different 
computers and networks. These can be pushed together with all changes stored
and recorded. It also makes it possible to roll back to a previous state if necessary.

HOW TO USE GIT
Git is typically used from the command line, although there are GUIs available for
Windows and Mac. Throughout this book we’ll use command-line statements to issue
the commands that we need. Git is very powerful and we’re barely going to scratch the
surface of it in this book, but everything we do will be noted.

In a typical Git setup you’ll have a local repository on your machine and a remote
centralized master repository hosted somewhere like GitHub or BitBucket. You can
pull from the remote repository into your local one, or push from local to remote. All
of this is really easy in the command line, and both GitHub and BitBucket have web
interfaces so that you can keep a visual track on everything committed.

WHAT ARE WE USING GIT FOR HERE?
In this book we’re going to be using Git for two reasons.

First, the source code of the sample application in this book will be stored on
GitHub, with different branches for various milestones. We’ll be able to clone the master 
or the separate branches to use the code.

Second, we’ll use Git as the method for deploying our application to a live web
server for the world to see. For hosting we’ll be using Heroku.


1.6.3 Hosting with Heroku

Hosting Node.js applications can be complicated, but it doesn’t have to be. Many traditional 
shared hosting providers haven’t kept up with the interest in Node.js. Some
will install it for you so that you can run applications, but the servers are generally not
set up to meet the unique needs of Node.js. To run a Node.js application successfully
you either need a server that has been configured with that in mind, or you can use a
PaaS provider that’s aimed specifically at hosting Node.js.

In this book we’re going to go for the latter. We’re going to use Heroku
(www.heroku.com) as our hosting provider. Heroku is one of the leading hosts for
Node.js applications, and it has an excellent free tier that we’ll be making use of.

Applications on Heroku are essentially Git repositories, making the publishing
process incredibly simple. Once everything is set up you can publish your application
to a live environment using a single command:

$ git push heroku master

I told you it didn't have to be complicated.