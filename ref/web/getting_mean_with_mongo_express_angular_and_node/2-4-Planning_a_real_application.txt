2.4 Planning a real application

As we talked about in chapter 1, throughout the course of this book we’ll build a working 
application on the MEAN stack called Loc8r. Loc8r will list nearby places with WiFi
where people can go and get some work done. It will also display facilities, opening
times, a rating, and a location map for each place. Visitors will be able to submit ratings 
and reviews.

For the sake of the demo application, we’ll be creating fake data so that we can test
it quickly and easily. So let’s get planning.


2.4.1 Planning the application at a high level

The first step is to think about what screens we’ll need in our application. We’ll focus
on the separate page views and the user journeys. We can do this at a very high level,
not really concerning ourselves with the details of what is on each page. It is a good
idea to sketch out this stage on a piece of paper or a whiteboard, as it helps to visualize
the application as a whole. It also helps with organizing the screens into collections
and flows, while serving as a good reference point for when we come to build it. As
there’s no data attached to the pages or application logic behind them, it’s really easy
to add and remove parts, change what is displayed where, and even change how many
pages we want. The chances are that we won’t get it right the first time; the key is to
start and iterate and improve until we’re happy with the separate pages and overall
user flow.

PLANNING THE SCREENS
Let’s think about Loc8r. As stated our aim is as follows:
  
  Loc8r will list nearby places with WiFi where people can go and get some
  work done. It will also display facilities, opening times, a rating, and a
  location map for each place. Visitors will be able to submit ratings and
  reviews.

From this we can get an idea about some of the screens we’re going to need:

  1 A screen that lists nearby places
  2 A screen that shows details about an individual place
  3 A screen for adding a review about a place

We’ll probably also want to tell visitors what Loc8r is for and why it exists, so we should
add another screen to the list:

  4 A screen for “about us” information

DIVIDING THE SCREENS INTO COLLECTIONS
Next we want to take the list of screens and collate them where they logically belong
together. For example, the first three in the list are all dealing with locations. The
About page doesn’t really belong anywhere so it can go in a miscellaneous Others collection. 
Sketching this out brings us something like figure 2.9.

Having a quick sketch like this is the first stage in planning, and we really need to
go through this stage before we can start thinking about architecture. This stage gives
us a chance to look at the basic pages, and to also think about the flow. Figure 2.9, for
example, also shows a basic user journey in the Locations collection, going from the
List page, to a Details page, and then onto the form to add a review.


2.4.2 Architecting the application

On the face of it Loc8r is a fairly simple application, with just a few screens. But we still
need to think about how to architect it, as we’re going to be transferring data from a
database to a browser, letting users interact with the data, and allowing data to be sent
back to the database.

STARTING WITH THE API
Because the application is going to be using a database and passing data around, we’ll
start building up the architecture with the piece we’re definitely going to need. 
Figure 2.10 shows the starting point, a REST API built with Express and Node.js to enable
interactions with the MongoDB database.

As already discussed in this chapter, building an API to interface with our data is a bit
of a given, and is the base point of the architecture. So the more interesting and difficult 
question is: How do we architect the application itself?

APPLICATION ARCHITECTURE OPTIONS
At this point we need to take a look at the specific requirements of our application,
and how we can put together the pieces of the MEAN stack to build the best solution.
Do we need something special from MongoDB, Express, AngularJS, or Node.js that
will swing the decision a certain way? Do we want HTML served directly from the
server, or is an SPA the better option?

For Loc8r there are no unusual or specific requirements, and whether or not it
should be easily crawlable by search engines depends on the business growth plan. If
the aim is to bring in organic traffic from search engines, then yes it needs to be 
crawlable. If the aim is to promote the application as an application and drive use that way,
then search engine visibility is a lesser concern.

Thinking back to the blog example, we can immediately envisage three possible
application architectures as shown in figure 2.11:

  1 A Node.js and Express application
  2 A Node.js and Express application with AngularJS additions for interactivity
  3 An AngularJS SPA

With these three options in mind, which is the best for Loc8r?

CHOOSING AN APPLICATION ARCHITECTURE
There are no specific business requirements pushing us to favor one particular architecture 
over another. It doesn’t matter because we’re going to do all three in this book.
Building all three of the architectures will allow us to explore how each approach works,
and will enable us to take a look at each of the technologies in turn, building up the
application layer by layer.

We’ll be building the architectures in the order they’re shown in figure 2.11, starting 
with a Node.js and Express application, then moving on to add some AngularJS,
before refactoring to an AngularJS SPA. While this isn’t necessarily how you might
build a site normally, it gives you a great opportunity for learning all aspects of the
MEAN stack. We’ll talk shortly in section 2.5 about the approach, and walk through
the plan in a bit more detail.


2.4.3 Wrapping everything in an Express project

The architecture diagrams we’ve been looking at so far imply that we’ll have separate
Express applications for the API and the application logic. This is perfectly possible,
and is a good way to go for a large project. If we’re expecting large amounts of traffic
we might even want our main application and our API on different servers. An additional 
benefit of this is that we can have more specific settings for each of the servers
and applications that are best suited to the individual needs.

Another way is to keep things simple and contained and have everything inside a
single Express project. With this approach we only have one application to worry
about hosting and deploying, and one set of source code to manage. This is what we’ll
be doing with Loc8r, giving us one Express project containing a few subapplications.
Figure 2.12 illustrates this particular approach.

When putting together an application in this way it’s important to organize our code
well so that the distinct parts of the application are kept separate. As well as making
our code easier to maintain, it also makes it easier to split it out into separate projects
further down the line if we decide that’s the right route. This is a key theme that we’ll
keep coming back to throughout the book.


2.4.4 The end product

As you can see, we’ll use all layers of the MEAN stack to create Loc8r. We’ll also include
Twitter Bootstrap to help us create a responsive layout. Figure 2.13 shows some screenshots 
of what we’re going to be building throughout the book.