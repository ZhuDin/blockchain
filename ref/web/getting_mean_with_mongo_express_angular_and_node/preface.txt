preface

Back in 1995 I got my first taste of web development, putting together a few pages of simple HTML for a piece of university coursework. It was a small part of my course, which was a mixture of software engineering and communication studies. This was an unusual mixture. I learned the fundamentals of software development, database design, and programming. But I also learned about the importance of the audience and enduser and how to communicate with them, both verbally and non-verbally.

In 1998, on the communication studies side of the degree, I was required to write a publication for an organization of my choice. I decided to write a prospectus for the school where my mother was teaching at the time. But I decided to do it as a website. Again this was all front-end work. Fortunately I no longer have a copy of it, as I shudder at the thought of the code. We’re talking HTML with frames, table layouts, inline styles, and a smattering of basic JavaScript. By today’s standards it was shocking, but back then it was quite futuristic. I was the first person at the university to submit a website as a publication. I even had to tell my instructors how to open it in their browser from the floppy disk it was submitted on! After it was completed and marked, I sold the website to the school it was about. I figured there was probably a future in this web development thing.

During the following years I made use of both parts of my degree working as the “web guy” in a London design agency. Because it was a design agency, user-experience (before it was called UX) and the front end were crucial. But of course there has to be a back end to support the front end. As the only web guy I fulfilled both roles as the classic fullstack developer. There wasn’t much separation of concerns in those days. The database was tightly coupled to the back end. Back-end logic, markup, and front-end logic all Licensed to Mark Watson <nordickan@gmail.com> www.it-ebooks.info xvi PREFACE wove together tightly. This is largely because the project was thought of as a single thing: the website.

Many of the best practices from this book are borne of the pain of finding out the hard way over these years. Something that might seem harmless at the time, most definitely easier, or sometimes even sensible, can come back to bite you later on. Don’t let this put you off from diving in and having a go. Mistakes are there to be made, and—in this arena at least—mistakes are a great way of learning. They say that intelligence is “learning from your mistakes.” This is true, but you’ll be a step ahead if you can also learn from others’ mistakes.

The web development landscape changed over the years, but I was still heavily involved with creating—or managing the creation of—full websites and applications. I came to appreciate that there is a real art to gluing together applications made from different technologies. It is a skill in itself; just knowing the technologies and what they can do is only part of the challenge.

When Node.js came onto my radar I jumped right in and embraced the idea full on. I had done a lot of context switching between various languages, and the idea of having a single language to focus on and master was extremely compelling. I figured that if used in the right way it could streamline development by reducing the language context shifting. Playing with Node I started to create my own MVC framework, before discovering Express. Express solved a lot of the problems and challenges I faced when first trying to learn Node and use it to create a website or web application. In many ways adopting it was a no-brainer.

Naturally, behind pretty much any web application is a database. I didn’t want to fall back on my previous go-to option of Microsoft SQL Server, as the cost made it quite prohibitive to launch small personal projects. Some research led me to the leading open source NoSQL database: MongoDB. It worked natively with JavaScript! I was more excited than I possibly should have been about a database. However MongoDB was different from all of the databases I had used before. My previous experience was all in relational databases; MongoDB is a document database, and that is something quite different, making the way you approach database design quite different as well. I had to retrain my brain to think in this new way, and eventually it all made sense.

There was just one piece missing. JavaScript in the browser was no longer just about enhancing functionality, it was about creating the functionality and managing the application logic. Out of the available options I was already leaning toward AngularJS. When I heard Valeri Karpov of MongoDB coin the term “MEAN stack” that was it. I knew that here was a next-generation stack.

I knew that the MEAN stack would be powerful. I knew that the MEAN stack would be flexible. I knew that the MEAN stack would capture the imagination of developers. Each of the individual technologies is great, but when you put them all together you have something exceptional on your hands. This is where Getting MEAN comes from. Getting the best out of the MEAN stack is more than just knowing the technologies, it’s about knowing how to get those technologies working together.


about this book

JavaScript has come of age. Building an entire web application from front to back with just one language is now possible, using JavaScript. The MEAN stack is comprised of the best-of-breed technologies in this arena. You’ve got MongoDB for the database, Express for the server-side web-application framework, AngularJS for the client-side framework, and Node for the server-side platform.

This book introduces each of these technologies, as well as how to get them working well together as a stack. Throughout the book we build a working application, focusing on one technology at a time, seeing how they fit into the overall application architecture. So it’s a very practical book designed to get you comfortable with all of the technologies and how to use them together.

A common theme running through the book is “best practice.” This book is a springboard to building great things with the MEAN stack, so there is a focus on creating good habits, doing things the “right way,” and planning ahead.

This book doesn’t teach HTML, CSS, or basic JavaScript; previous knowledge of these are assumed. It does include a very brief primer on the Twitter Bootstrap CSS framework, and there’s also a good, long appendix on JavaScript theory, best practice, tips, and gotchas. It’s worth checking out early on. This appendix can be found online at www.manning.com/books/getting-mean-with-mongo-express-angular-and-node.


Roadmap

This book takes you on a journey through eleven chapters, as follows:

Chapter 1 takes a look at the benefits of learning full-stack development and explores the components of the MEAN stack.

Chapter 2 builds on this knowledge of the components and discusses options of how you can use them together to build different things.

Chapter 3 gets you going with creating and setting up a MEAN project, getting you acquainted with Express.

Chapter 4 provides a much deeper understanding of Express by building out a static version of the application.

Chapter 5 takes what we’ve learned about the application so far and works with MongoDB and Mongoose to design and build the data model we’ll need.

Chapter 6 covers the benefits and processes of creating a data API, and we’ll create a REST API using Express, MongoDB, and Mongoose.

Chapter 7 ties this REST API back into the application by consuming it from our static Express application.

Chapter 8 introduces Angular to the stack, and we’ll see how to use it to build a component for an existing web page, including calling our REST API to get data.

Chapter 9 covers the fundamentals of creating a single-page application with Angular, showing how to build a modular, scalable, and maintainable application.

Chapter 10 builds on the foundations of chapter 9, developing the single-page application further by covering some critical concepts and increasing the complexity of the Angular application.

Chapter 11 touches every part of the MEAN stack as we add authentication to the application, enabling users to register and log in. 