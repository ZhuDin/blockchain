1.5 Introducing AngularJS: The front-end framework 

AngularJS is the A in MEAN. In simple terms, AngularJS is a JavaScript framework for
working with data directly in the front end. 

You could use Node.js, Express, and MongoDB to build a fully functioning datadriven 
web application. And we’ll do just this throughout the book. But you can put
some icing on the cake by adding AngularJS to the stack.

The traditional way of doing things is to have all of the data processing and application 
logic on the server, which then passes HTML out to the browser. AngularJS
enables you to move some or all of this processing and logic out to the browser, sometimes 
leaving the server just passing data from the database. We’ll take a look at this in
a moment when we discuss two-way data binding, but first we need to address the
question of whether AngularJS is like jQuery, the leading front-end JavaScript library.


1.5.1 jQuery versus AngularJS

If you’re familiar with jQuery, you might be wondering if AngularJS works the same
way. The short answer is no, not really. jQuery is generally added to a page to provide
interactivity, after the HTML has been sent to the browser and the Document Object
Model (DOM) has completely loaded. AngularJS comes in a step earlier and helps put
together the HTML based on the data provided.

Also, jQuery is a library, and as such has a collection of features that you can use as
you wish. AngularJS is what is known as an opinionated framework. This means that it
forces its opinion on you as to how it needs to be used.

As mentioned, AngularJS helps put the HTML together based on the data provided, 
but it does more than this. It also immediately updates the HTML if the data
changes, and can also update the data if the HTML changes. This is known as two-way
data binding, which we’ll now take a quick look at.


1.5.2 Two-way data binding: Working with data in a page

To understand two-way data binding let’s start with a look at the traditional approach
of one-way data binding. One-way data binding is what you’re aiming for when looking 
at using Node.js, Express, and MongoDB. Node.js gets the data from MongoDB,
and Express then uses a template to compile this data into HTML that’s then delivered
to the server. This process is illustrated in figure 1.5.

This one-way model is the basis for most database-driven websites. In this model
most of the hard work is done on the server, leaving the browser to just render HTML
and run any JavaScript interactivity.

Two-way data binding is different. First, the template and data are sent independently
to the browser. The browser itself compiles the template into the view and the data
into a model. The real difference is that the view is “live.” The view is bound to the
model, so if the model changes the view changes instantly. On top of this, if the view
changes then the model also changes. Two-way binding is illustrated in figure 1.6.

As your data store is likely to be exposed via an API and not tightly coupled to the
application, there’s typically some processing involved before adding it to the model.
You want to make sure that you’re binding the correct, relevant data to the view.

As we go through part 3 of the book you’ll really get to see—and use—this in action.
Seeing is believing with this, and you won’t be disappointed.


1.5.3 Using AngularJS to load new pages

Something that AngularJS has been specifically designed for is single-page application
(SPA) functionality. In real terms, an SPA runs everything inside the browser and never
does a full page reload. What this means is that all application logic, data processing,
user flow, and template delivery can be managed in the browser.

Think Gmail. That’s an SPA. Different views get shown in the page, along with a
whole variety of data sets, but the page itself never fully reloads.

This approach can really reduce the amount of resources you need on your server,
as you’re essentially crowd-sourcing the computational power. Each person’s browser
is doing the hard work, and your server is basically just serving up static files and data
on request.

The user experience can also be better when using this approach. Once the application 
is loaded there are fewer calls to be made to the server, reducing the potential
of latency.

All this sounds great, but surely there’s a price to pay? Why isn’t everything built in
AngularJS?


1.5.4 Are there any downsides?

Despite its many benefits, AngularJS isn’t appropriate for every website. Front-end
libraries like jQuery are best used for progressive enhancement. The idea is that your
site will function perfectly well without JavaScript, and the JavaScript you do use
makes the experience better. That isn’t the case with AngularJS, or indeed any other
SPA framework. AngularJS uses JavaScript to build the rendered HTML from templates
and data, so if your browser doesn’t support JavaScript, or if there’s a bug in the code,
then the site won’t run.

This reliance on JavaScript to build the page also causes problems with search
engines. When a search engine crawls your site it will not run any JavaScript, and
with AngularJS the only thing you get before JavaScript takes over is the template
from the server. If you want your content and data indexed by search engines
rather than just your templates, you’ll need to think whether AngularJS is right for
that project.

There are ways to combat this issue—in short, you need your server to output compiled 
content as well as AngularJS—but if you don’t need to fight this battle, I’d recommend 
against doing so.

One thing you can do is use AngularJS for some things and not others. There’s
nothing wrong with using AngularJS selectively in your project. For example, you might
have a data-rich interactive application or section of your site that’s ideal for building
in AngularJS. You might also have a blog or some marketing pages around your application. 
These don’t need to be built in AngularJS, and arguably would be better served
from the server in the traditional way. So part of your site is served by Node.js, Express,
and MongoDB, and another part also has AngularJS doing its thing.

This flexible approach is one of the most powerful aspects of the MEAN stack. With
one stack you can achieve a great many different things.