2.5 Breaking the development into stages

In this book we have two aims:
  1 Build an application on the MEAN stack
  2 Learn about the different layers of the stack as we go

We’ll approach the project in the way I’d personally go about building a rapid prototype, 
but with a few tweaks to give you the best coverage of the whole stack. We’ll start
by looking at the five stages of rapid prototype development, and then see how we can
use this approach to build up Loc8r layer by layer, focusing on the different technologies 
as we go.


2.5.1 Rapid prototype development stages

Let’s break down the process into a number of stages, which lets us concentrate on
one thing at a time, increasing our chances of success. I find this approach works well
for making an idea a reality.

STAGE 1: BUILD A STATIC SITE
The first stage is to build a static version of the application, which is essentially a number of HTML screens. The aims of this stage are

  ■ To quickly figure out the layout
  ■ To ensure that the user flow makes sense

At this point we’re not concerned with a database or flashy effects on the user interface; 
all we want to do is create a working mockup of the main screens and journeys
that a user will take through the application.

STAGE 2: DESIGN THE DATA MODEL AND CREATE THE DATABASE
Once we have a working static prototype that we’re happy with, the next thing to do is
look at any hard-coded data in the static application and put it into a database. The
aims of this stage are

  ■ To define a data model that reflects the requirements of the application
  ■ To create a database to work with the model

The first part of this is to define the data model. Stepping back to a bird’s-eye view,
what are the objects we need data about, how are the objects connected, and what
data is held in them?

If we try to do this stage before building the static prototype then we’re dealing
with abstract concepts and ideas. Once we have a prototype, we can see what is happening 
on different pages and what data is needed where. Suddenly this stage becomes
much easier. Almost unknown to us, we’ve done the hard thinking while building the
static prototype.

STAGE 3: BUILD OUR DATA API
After stages 1 and 2 we have a static site on one hand and a database on the other. This
stage and the next take the natural steps of linking them together. The aim of stage 3 is

  ■ To create a REST API that will allow our application to interact with the database 

STAGE 4: HOOK THE DATABASE INTO THE APPLICATION
When we get to this stage we have a static application and an API exposing an interface 
to our database. The aim of this stage is

  ■ To get our application to talk to our API

When this stage is complete the application will look pretty much the same as it did
before, but the data will be coming from the database. When it’s done, we’ll have a
data-driven application!

STAGE 5: AUGMENT THE APPLICATION
This stage is all about embellishing the application with additional functionality. We
might add authentication systems, data validation, or methods for displaying error
messages to users. It could include adding more interactivity to the front end or 
tightening up the business logic in the application itself.

So, really, the aims of this stage are
  ■ To add finishing touches to our application
  ■ To get the application ready for people to use

These five stages of development provide a great methodology for approaching a new
build project. Let’s take a look at how we’ll follow these steps to build Loc8r.


2.5.2 The steps to build Loc8r

In building Loc8r throughout this book we have two aims. First, of course, we want
to build a working application on the MEAN stack. Second, we want to learn about
the different technologies, how to use them, and how to put them together in different 
ways.

So throughout the book we’ll be following the five stages of development, but with
a couple of twists so that we get to see the whole stack in action. Before we look at the
steps in detail, let’s quickly remind ourselves of the proposed architecture as shown in
figure 2.14.

STEP 1: BUILD A STATIC SITE
We’ll start off by following stage 1 and building a static site. I recommend doing this
for any application or site, as you can learn a lot with relatively little effort. When
building the static site, it’s good to keep one eye on the future, keeping in mind what
the final architecture will be. We’ve already defined the architecture for Loc8r as shown
in figure 2.14.

Based on this architecture we’ll build the static application in Node and Express,
using that as our starting point into the MEAN stack. Figure 2.15 highlights this step in
the process as the first part of developing the proposed architecture.

This step is covered in chapters 3 and 4.

STEP 2: DESIGN THE DATA MODEL AND CREATE THE DATABASE
Still following the stages of development we’ll continue to stage 2 by creating the database 
and designing the data model. Again, any application is likely to need this step,
and you’ll get much more out of it if you’ve been through step 1 first.

Figure 2.16 illustrates how this step adds to the overall picture of building up the
application architecture.

In the MEAN stack we’ll use MongoDB for this step, relying heavily on Mongoose for
the data modeling. The data models themselves will actually be defined inside the
Express application. This step will be covered in chapter 5.

STEP 3: BUILD OUR REST API
When we’ve built the database and defined the data models we’ll want to create a
REST API so that we can interact with the data through making web calls. Pretty much
any data-driven application will benefit from having an API interface, so this is another
step you’ll want to have in most build projects.

You can see where this step fits into building the overall project in figure 2.17.

In the MEAN stack this step is mainly done in Node.js and Express, with quite a bit
of help from Mongoose. We’ll use Mongoose to interface with MongoDB rather than
dealing with MongoDB directly. This step will be covered in chapter 6.

STEP 4: USE THE API FROM OUR APPLICATION
This step matches stage 4 of the development process and is where Loc8r will start to
come to life. The static application from step 1 will be updated to use the REST API
from step 3 to interact with the database created in step 2.

To learn about all parts of the stack, and the different ways in which we can use them,
we’ll be using Express and Node.js to make calls to the API. If, in a real-world scenario,
you were planning to build the bulk of an application in AngularJS then you’d hook
your database into AngularJS instead. We’ll cover that in chapters 8, 9, and 10.

At the end of this step we’ll have an application running on the first of the three
architectures: an Express and Node.js application. Figure 2.18 shows how this step fits
together the two sides of the architecture.

In this build we’ll be doing the majority of this step in Node.js and Express, and it will
be covered in chapter 7.

STEP 5: EMBELLISH THE APPLICATION
Step 5 relates to stage 5 in the development process where we get to add extra touches
to the application. We’re going to use this step to take a look at AngularJS, and we’ll
see how we can integrate AngularJS components into an Express application.

You can see this addition to the project architecture highlighted in figure 2.19.

This step is all about introducing and using AngularJS. To support this we’ll most
likely also change some of our Node.js and Express setup. This step will be covered in
chapter 8.

STEP 6: REFACTOR THE CODE INTO AN ANGULARJS SPA
In step 6 we’ll radically change the architecture by replacing the Express application
and moving all of the logic into an SPA using AngularJS. Unlike all of the previous
steps, this replaces some of what has come before it, rather than building upon it.

This would be an unusual step in a normal build process, to develop an application
in Express and then redo it in AngularJS, but it suits the learning approach in this
book particularly well. We’ll be able to focus on AngularJS as we already know what
the application should do, and there’s a data API ready for us.

Figure 2.20 shows how this change affects the overall architecture.
This step is once again focused on AngularJS, and will be covered in chapters 9 and 10.

STEP 7: ADD AUTHENTICATION
In step 7 we’ll add functionality to the application and enable users to register and log
in, and also see how to make use of the user’s data whilst they are using the application. 
We’ll build on everything we’ve done so far and add authentication to the Angular SPA. 
As a part of this we’ll save user information in the database and secure certain
API end points so that they can only be used by authenticated users.

In this step we’ll work with all of the MEAN technologies; this is covered in chapter 11.