C 结构体

C 数组允许定义可存储相同类型数据项的变量，结构是 C 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。


定义结构

为了定义结构，您必须使用 struct 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：

	struct tag { 
	    member-list
	    member-list 
	    member-list  
	    ...
	} variable-list ;

tag 是结构体标签。

member-list 是标准的变量定义，比如 int i; 或者 float f，或者其他有效的变量定义。

variable-list 结构变量，定义在结构的末尾，最后一个分号之前，您可以指定一个或多个结构变量。

在一般情况下，tag、member-list、variable-list 这 3 部分至少要出现 2 个。


结构体变量的初始化

和其它类型变量一样，对结构体变量可以在定义时指定初始值。


访问结构成员

为了访问结构的成员，我们使用成员访问运算符（.）。成员访问运算符是结构变量名称和我们要访问的结构成员之间的一个句号。您可以使用 struct 关键字来定义结构类型的变量。


结构作为函数参数

您可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。


指向结构的指针

您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：

	struct Books * struct_pointer;

现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 & 运算符放在结构名称的前面，如下所示：

	struct_pointer = &Book1;

为了使用指向该结构的指针访问结构的成员，您必须使用 -> 运算符，如下所示：

	struct_pointer->title;

让我们使用结构指针来重写上面的实例，这将有助于您理解结构指针的概念：

	#include <stdio.h>
	#include <string.h>
	 
	struct Books
	{
	   char  title[50];
	   char  author[50];
	   char  subject[100];
	   int   book_id;
	};
	 
	/* 函数声明 */
	void printBook( struct Books *book );
	int main( )
	{
	   struct Books Book1;        /* 声明 Book1，类型为 Books */
	   struct Books Book2;        /* 声明 Book2，类型为 Books */
	 
	   /* Book1 详述 */
	   strcpy( Book1.title, "C Programming");
	   strcpy( Book1.author, "Nuha Ali"); 
	   strcpy( Book1.subject, "C Programming Tutorial");
	   Book1.book_id = 6495407;
	 
	   /* Book2 详述 */
	   strcpy( Book2.title, "Telecom Billing");
	   strcpy( Book2.author, "Zara Ali");
	   strcpy( Book2.subject, "Telecom Billing Tutorial");
	   Book2.book_id = 6495700;
	 
	   /* 通过传 Book1 的地址来输出 Book1 信息 */
	   printBook( &Book1 );
	 
	   /* 通过传 Book2 的地址来输出 Book2 信息 */
	   printBook( &Book2 );
	 
	   return 0;
	}
	void printBook( struct Books *book )
	{
	   printf( "Book title : %s\n", book->title);
	   printf( "Book author : %s\n", book->author);
	   printf( "Book subject : %s\n", book->subject);
	   printf( "Book book_id : %d\n", book->book_id);
	}


位域

有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。例如在存放一个开关量时，只有 0 和 1 两种状态，用 1 位二进位即可。为了节省存储空间，并使处理简便，C 语言又提供了一种数据结构，称为"位域"或"位段"。

所谓"位域"是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示。

典型的实例：

	用 1 位二进位存放一个开关量时，只有 0 和 1 两种状态。

	读取外部文件格式——可以读取非标准的文件格式。例如：9 位的整数。


位域的定义和位域变量的说明

位域定义与结构定义相仿，其形式为：

	struct 位域结构名 
	{

	 位域列表

	};

其中位域列表的形式为：

	类型说明符 位域名: 位域长度 

例如：
	struct bs{
	    int a:8;
	    int b:2;
	    int c:6;
	}data;

说明 data 为 bs 变量，共占两个字节。其中位域 a 占 8 位，位域 b 占 2 位，位域 c 占 6 位。


对于位域的定义尚有以下几点说明：

  * 一个位域存储在同一个字节中，如一个字节所剩空间不够存放另一位域时，则会从下一单元起存放该位域。也可以有意使某位域从下一单元开始。

  * 由于位域不允许跨两个字节，因此位域的长度不能大于一个字节的长度，也就是说不能超过8位二进位。如果最大长度大于计算机的整数字长，一些编译器可能会允许域的内存重叠，另外一些编译器可能会把大于一个域的部分存储在下一个字中。

  * 位域可以是无名位域，这时它只用来作填充或调整位置。无名的位域是不能使用的。

从以上分析可以看出，位域在本质上就是一种结构类型，不过其成员是按二进位分配的。


位域的使用

位域的使用和结构成员的使用相同，其一般形式为：

	位域变量名.位域名
	
	位域变量名->位域名
