C 位域

如果程序的结构中包含多个开关量，只有 TRUE/FALSE 变量，如下：	

	struct
	{
	  unsigned int widthValidated;
	  unsigned int heightValidated;
	} status;

这种结构需要 8 字节的内存空间，但在实际上，在每个变量中，我们只存储 0 或 1。在这种情况下，C 语言提供了一种更好的利用内存空间的方式。如果您在结构内使用这样的变量，您可以定义变量的宽度来告诉编译器，您将只使用这些字节。例如，上面的结构可以重写成：

	struct
	{
	  unsigned int widthValidated : 1;
	  unsigned int heightValidated : 1;
	} status;


位域声明

在结构内声明位域的形式如下：

	struct
	{
	  type [member_name] : width ;
	};

下面是有关位域中变量元素的描述：

元素				描述
type			整数类型，决定了如何解释位域的值。类型可以是整型、有符号整型、无符号整型。
member_name		位域的名称。
width			位域中位的数量。宽度必须小于或等于指定类型的位宽度。

带有预定义宽度的变量被称为位域。


结构体内存分配原则

原则一：结构体中元素按照定义顺序存放到内存中，但并不是紧密排列。从结构体存储的首地址开始，每一个元素存入内存中时，它都会认为内存是以自己的宽度来划分空间的，因此元素存放的位置一定会在自己大小的整数倍上开始。

原则二： 在原则一的基础上，检查计算出的存储单元是否为所有元素中最宽的元素长度的整数倍。若是，则结束；否则，将其补齐为它的整数倍。


定义位域时，各个成员的类型最好保持一致，比如都用char，或都用int，不要混合使用，这样才能达到节省内存空间的目的
