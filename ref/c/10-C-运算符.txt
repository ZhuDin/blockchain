C 运算符

运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C 语言内置了丰富的运算符，并提供了以下类型的运算符：

	算术运算符

	关系运算符
	
	逻辑运算符
	
	位运算符
	
	赋值运算符
	
	杂项运算符

本章将逐一介绍算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符和其他运算符。


算术运算符

下表显示了 C 语言支持的所有算术运算符。假设变量 A 的值为 10，变量 B 的值为 20，则：
运算符	描述								实例
+		把两个操作数相加					A + B 将得到 30
-		从第一个操作数中减去第二个操作数	A - B 将得到 -10
*		把两个操作数相乘					A * B 将得到 200
/		分子除以分母						B / A 将得到 2
%		取模运算符，整除后的余数			B % A 将得到 0
++		自增运算符，整数值增加 1			A++ 将得到 11
--		自减运算符，整数值减少 1			A-- 将得到 9


关系运算符

下表显示了 C 语言支持的所有关系运算符。假设变量 A 的值为 10，变量 B 的值为 20，则：

运算符	描述														实例
==		检查两个操作数的值是否相等，如果相等则条件为真。				(A == B) 不为真。
!=		检查两个操作数的值是否相等，如果不相等则条件为真。			(A != B) 为真。
>		检查左操作数的值是否大于右操作数的值，如果是则条件为真。		(A > B) 不为真。
<		检查左操作数的值是否小于右操作数的值，如果是则条件为真。		(A < B) 为真。
>=		检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。	(A >= B) 不为真。
<=		检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。	(A <= B) 为真。


逻辑运算符

下表显示了 C 语言支持的所有关系逻辑运算符。假设变量 A 的值为 1，变量 B 的值为 0，则：

运算符	描述																实例
&&		称为逻辑与运算符。如果两个操作数都非零，则条件为真。					(A && B) 为假。
||		称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。			(A || B) 为真。
!		称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。	!(A && B) 为真。


位运算符

位运算符作用于位，并逐位执行操作。&、 | 和 ^ 的真值表如下所示：
p	q	p & q	p | q	p ^ q
0	0	0		0		0
0	1	0		1		1
1	1	1		1		0
1	0	0		1		1

假设如果 A = 60，且 B = 13，现在以二进制格式表示，它们如下所示：

	A = 0011 1100

	B = 0000 1101

	-----------------

	A&B = 0000 1100

	A|B = 0011 1101

	A^B = 0011 0001

	~A  = 1100 0011

运算符	描述												实例
<<		二进制左移运算符。									A << 2 将得到 240，即为 1111 0000
		将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。	

>>		二进制右移运算符。									A >> 2 将得到 15，即为 0000 1111
		将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。	


赋值运算符

下表列出了 C 语言支持的赋值运算符：
运算符	描述																实例
=		简单的赋值运算符，把右边操作数的值赋给左边操作数						C = A + B 将把 A + B 的值赋给 C
+=		加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数		C += A 相当于 C = C + A
-=		减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数		C -= A 相当于 C = C - A
*=		乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数		C *= A 相当于 C = C * A
/=		除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数		C /= A 相当于 C = C / A
%=		求模且赋值运算符，求两个操作数的模赋值给左边操作数					C %= A 相当于 C = C % A
<<=		左移且赋值运算符													C <<= 2 等同于 C = C << 2
>>=		右移且赋值运算符													C >>= 2 等同于 C = C >> 2
&=		按位与且赋值运算符												C &= 2 等同于 C = C & 2
^=		按位异或且赋值运算符												C ^= 2 等同于 C = C ^ 2
|=		按位或且赋值运算符												C |= 2 等同于 C = C | 2


杂项运算符 ↦ sizeof & 三元

下表列出了 C 语言支持的其他一些重要的运算符，包括 sizeof 和 ? :。

运算符		描述							实例
sizeof()	返回变量的大小。				sizeof(a) 将返回 4，其中 a 是整数。
&			返回变量的地址。				&a; 将给出变量的实际地址。
*			指向一个变量。				*a; 将指向一个变量。
? :			条件表达式					如果条件为真 ? 则值为 X : 否则值为 Y


C 中的运算符优先级

运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。

例如 x = 7 + 3 * 2，在这里，x 被赋值为 13，而不是 20，因为运算符 * 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。

下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。

类别 		运算符 								结合性 
后缀 		() [] -> . ++ - -  					从左到右 
一元 		+ - ! ~ ++ - - (type)* & sizeof 	从右到左 
乘除 		* / % 								从左到右 
加减 		+ - 								从左到右 
移位 		<< >> 								从左到右 
关系 		< <= > >= 							从左到右 
相等 		== != 								从左到右 
位与 AND 	& 									从左到右 
位异或 XOR 	^ 									从左到右 
位或 OR 		| 									从左到右 
逻辑与 AND 	&& 									从左到右 
逻辑或 OR 	|| 									从左到右 
条件 		?: 									从右到左 
赋值 		= += -= *= /= %=>>= <<= &= ^= |= 	从右到左 
逗号 		, 									从左到右 


利用异或 ^ 来交换两个数的值，而且不引入其他变量。

	unsigned int a=60;  //0011 1100
	unsigned int b=13;  //0000 1101
	a=a^b;              //a=a^b=0011 0001
	b=a^b;              //b=a^b=0011 1100  相当于b1=(a^b)^b
	a=a^b;              //a=a^b=0000 1101  相当于a1=(a^b)^((a^b)^b)


利用位与 & 运算，判断一个整数是否是2的整数次幂。

二进制数的位权是以2为底的幂，如果一个整数 m 是 2 的 n 次幂，那么转换为二进制之后只有最高位为 1，其余位置为 0，再观察 m-1 转换为二进制后的形式以及 m&(m-1) 的结果，例如：

	2 --> 0000 0010        1 --> 0000 0001        2&1 --> 0000 0010 & 0000 0001 = 0
	4 --> 0000 0100        3 --> 0000 0011        4&3 --> 0000 0100 & 0000 0011 = 0
	8 --> 0000 1000        7 --> 0000 0111        8&7 --> 0000 1000 & 0000 0111 = 0

可以看出所有的 1 完美的错过了，根据位与的特点可知 m&(m-1) 的结果为 0。

如果整数 m 不是 2 的 n 次幂，结果会怎样呢？例如 m=9 时：
	
	9 --> 0000 1001        8 --> 0000 1000        9&8 --> 0000 1001 & 0000 1000 != 0

利用这一特点，即可判断一个整数是否是2的整数次幂。

	int func(int num)
	{
	    return ((num > 0) && ((num & (num - 1)) == 0));//2的n次幂大于0
	}

返回值为 1，则输入的正整数为 2 的整数次幂，返回值为 0 则不是。


不同长度的数据进行位运算

如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。

以“与”运算为例说明如下：我们知道在 C 语言中 long 型占 4 个字节，int 型占 2 个字节，如果一个 long 型数据与一个 int 型数据进行“与”运算，右端对齐后，左边不足的位依下面三种情况补足:

 （1）如果整型数据为正数，左边补 16 个 0。
 （2）如果整型数据为负数，左边补 16 个 1。
 （3）如果整形数据为无符号数，左边也补 16 个 0。