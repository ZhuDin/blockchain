C 函数

函数是一组一起执行一个任务的语句。每个 C 程序都至少有一个函数，即主函数 main() ，所有简单的程序都可以定义其他额外的函数。

您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。

函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。

C 标准库提供了大量的程序可以调用的内置函数。例如，函数 strcat() 用来连接两个字符串，函数 memcpy() 用来复制内存到另一个位置。

函数还有很多叫法，比如方法、子例程或程序，等等。


定义函数

C 语言中的函数定义的一般形式如下：

	return_type function_name( parameter list )
	{
		body of the function
	}

在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：

	* 返回类型：一个函数可以返回一个值。return_type是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 void。

	* 函数名称：这是函数的实际名称。函数名和参数列表一起构成了函数签名。

	* 参数：参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。

	* 函数主体：函数主体包含一组定义函数执行任务的语句。


函数声明

函数声明会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。

函数声明包括以下几个部分：
	
	return_type function_name( parameter list );

在函数声明中，参数的名称并不重要，只有参数的类型是必需的.

当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。


调用函数

创建 C 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。

当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。

调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。


函数参数

如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的形式参数。

形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。

当调用函数时，有两种向函数传递参数的方式：

调用类型				描述

传值调用				该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。

引用调用				通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。

默认情况下，C 使用传值调用来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的实际参数。


根据函数能否被其他源文件调用，将函数区分为内部函数和外部函数。

内部函数
如果一个函数只能被本文件中其他函数所调用，它称为内部函数。在定义内部函数时，在函数名和函数类型的前面加 static，即

	static 类型名 函数名 （形参表）

例如，函数的首行：

	static int max(int a,int b)

内部函数又称静态函数。使用内部函数，可以使函数的作用域只局限于所在文件。即使在不同的文件中有同名的内部函数，也互不干扰。提高了程序的可靠性。

外部函数
如果在定义函数时，在函数的首部的最左端加关键字 extern，则此函数是外部函数，可供其它文件调用。

如函数首部可以为

	extern int max (int a,int b)

C 语言规定，如果在定义函数时省略 extern，则默认为外部函数。

在需要调用此函数的其他文件中，需要对此函数作声明（不要忘记，即使在本文件中调用一个函数，也要用函数原型来声明）。在对此函数作声明时，要加关键字 extern，表示该函数是在其他文件中定义的外部函数。


内联函数

内联函数是指用inline关键字修饰的函数。在类内定义的函数被默认成内联函数。内联函数从源代码层看，有函数的结构，而在编译后，却不具备函数的性质。

内联扩展是用来消除函数调用时的时间开销。它通常用于频繁执行的函数，对于小内存空间的函数非常受益。

使用内联函数的时候要注意：

  * 递归函数不能定义为内联函数

  * 内联函数一般适合于不存在while和switch等复杂的结构且只有1~5条语句的小函数上，否则编译系统将该函数视为普通函数。

  * 内联函数只能先定义后使用，否则编译系统也会把它认为是普通函数。

  * 对内联函数不能进行异常的接口声明。


占位符就是先占住一个固定的位置，等着你再往里面添加内容的符号，广泛用于计算机中各类文档的编辑。

格式占位符(%)是在C/C++语言中格式输入函数，如scanf、printf等函数中使用。其意义就是起到格式占位的意思，表示在该位置有输入或者输出。

	%d, %i 代表整数
	%f 浮点
	%s 字符串
	%c char
	%p 指针
	%fL 长log
	%e 科学计数
	%g 小数或科学计数。
	%a,%A 读入一个浮点值(仅C99有效)。
	%c 读入一个字符。
	%d 读入十进制整数。
	%i 读入十进制，八进制，十六进制整数。
	%o 读入八进制整数。
	%x,%X 读入十六进制整数。
	%s 读入一个字符串，遇空格、制表符或换行符结束。
	%f,%F,%e,%E,%g,%G 用来输入实数，可以用小数形式或指数形式输入。
	%p 读入一个指针。
	%u 读入一个无符号十进制整数。
	%n 至此已读入值的等价字符数。
	%[] 扫描字符集合。
	%% 读 % 符号