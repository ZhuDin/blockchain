git status

git status is a utility that is used by Git. It's used to retrieve
the details of files that are untracked, unstaged, or staged.
git status lists files in order of their statuses.

The git status output is lengthy in nature. To view a brief
list and status, use the -s or --short option with the git
status command.


Exercise 12: Viewing and Establishing the Status of a File

To complete this exercise, you will need to create a class in
the abacus application, so that you can host the functions
that you'll be building for this application.

To establish the status of a file in a repository, follow these
steps:

1. Create a branch to host this modification by using the
   following command:

    git branch ft-add-encapsulating-class

  Note
  The changes made on this branch will later be incorporated
  into the branch master, that is, the primary branch.

  Note
  The modification is done by using the command below:

    git checkout ft-add-encapsulating-class

  Note
  You can create a branch by using:
  git checkout -b ft-add-encapsulating-class. The prefix ft on
  the branch name is based on the best practices for enforcing
  a naming convention for different branch types.

  ft: Use this prefix for a feature branch.
  bg: This prefix should be used for bug branches.
  fx: The fx prefix is utilized identify a branch for rolling
      out hotfixes.
  ch: This prefix is used for chore branches. Chores refer to
      tasks like styling code and rearranging files in a repository

2. Create the .gitignore file by using the following command:

    echo '.DS_Store' > .gitignore

3. Run the git status command to view untracked files.

4. Open the abacus repository in a text editor of your choice.

5. Open compute.py in the text editor.

6. Add the following lines to compute.py and save the changes:

    ---------Live Link for exercise_1_step_6.py------------

7. Run git status of view any untracked and unstaged files.

8. Run git add src/lib/compute.py to stage the changes made
   to the file.

9. Run git status to view untracked and staged files.

10.Run git add .gitignore to start tracking the .gitignore file.

11.Commit the staged changes by using the following command:

    git commit -m "Adding a class for math functions"

  Note
  To ensure flexibility, atomic commits are perferred and
  emphasized in version control. The term atomic commits
  refers to units of change that can be treated as a single
  unit. This normally implies a single file or a small set of
  files. This enables the addition and removal of changes
  without affecting a large set of files.

12.Push the changes make to a remote branch by using the
   following command:

    git push origina ft-add-encapsulating-class


Outcome

By following the steps that we have outlined, you should be
able to use git status to view untracked, unstaged, and
staged files.

