5. Data Structures

This chapter describes some things you've learned about already in more detail, and adds some new things as well.


5.1. More on Lists

The list data type has some more methods. Here are all of the methods of list objects:

list.append(x)
    Add an item to the end of the list. Equivalent to a[len(a):] = [x].

list.extend(iterable)
    Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable.

list.insert(i, x)
    Insert an item at a given position. The first argument is the index of the element before which to insert, so 
    a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).

list.remove(x)
    Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item.

list.pop(i)
    Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and 
    returns the last item in the list.
   
list.clear()
    Remove all items from the list. Equivalent to del a[:]

list.index(x)
    Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError is there is 
    no such item.
    The optional arguments start and end are interpreted as in the slice notation and are used to limit the search 
    to a particular subsequence of the list. The returned index is computed relative to the beginning of the full 
    sequence rather than the start argument.

list.count(x)
    Return the number of times x appears in the list.

list.sort(key=None, reverse=False)
    Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their 
    explanation).

list.reverse()
    Reverse the elements of the list in place.

list.copy()
    Return a shallow copy of the list. Equivalent to a[:].


5.1.1. Using Lists as Stacks

The list methods make it very easy to use a list as a stack, where the last element added is the first element 
retrieved("last-in, first-out"). To add an item to the top of the stack, use append(). To retrieve an item from the top
of the stack, use pop() without an explicit index.
>>> stack = [3, 4, 5]
>>> stack.append(6)
>>> print(stack)
>>> stack.append(7)
>>> print(stack)
>>> stack.pop()
>>> print(stack)
>>> stack.pop()
>>> print(stack)


5.1.2 Using Lists as Queues

It is also possible to use a list as a queue, where the first added is the first element retrieved("first-in, 
first-out"); however, lists are not efficient for this purpose.  While appends and pops from the end of list are fast, 
doing inserts or pops from  the beginning of a list is slow.

To implement a queue, use collections.deque which was designed to have fast appends and pops from  both ends.
For example:
>>> from collections import deque
>>> queue = deque(['Eric', 'John', 'Michael'])
>>> print(queue)
>>> queue.append('Terry')
>>> print(queue)
>>> queue.append('Graham')
>>> print(queue)
>>> print(queue.popleft())
>>> print(queue)
>>> print(queue.popleft())
>>> print(queue)


5.1.3 List Comprehensions

List comprehensions provide a concise way to create lists. Common applications are to make new lists where 
each element is the result of some operations applied to each member of another sequence or iterable, or to 
create a subsequence of those elements that satisfy a certain condition.

For example, assume we want to create a list of squares, like:
>>> squares = []
>>> for x in range(10):
...     squares.append(x**2)
...
>>> print(squares)

We can calculate the list of squares without any side effects using:
>>> squaresCom1 = list(map(lambda x: x**2, range(10)))
>>> print(squaresCom1)

or equivalently. Which is more concise and readable
>>> squaresCom2 = [x**2 for x in range(10)]
>>> print(squaresCom2)

A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more 
for or if clauses. The resulting from evaluating the expression in the context of the for and if caluse which 
follow it.
>>> print([(x, y) for x in [1,2,3] for y in [3,1,4] if x != y])

and it's equivalent to:
>>> combs = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...         if x != y:
...             combs.append((x, y))
...
>>> print(combs)

>>> vec = [-4, -2, 0, 2, 4]
>>> print([x*2 for x in vec])
>>> print([x for x in vec if x >= 0])
>>> print([abs(x) for x in vec])

>>> freshfruit = ['  banana', '  loganberry  ', 'passion fruit  ']
>>> print([weapon.strip() for weapon in freshfruit])

If the expression is a tuple (e.g. the (x, y) in the previous example), it must be parenthesized
>>> print([(x, x**2) for x in range(6)])

>>> # flatten a list using a listcomp with two 'for'
>>> vec = [[1,2,3], [4,5,6], [7,8,9]]
>>> print([num for elem in vec for num in elem])


5.1.4 Nested List Comprehensions

The initial expression in a list comprehension can be any arbitrary expression, including another list comprehension.
>>> matrix = [
...         [1, 2, 3, 4],
...         [5, 6, 7, 8],
...         [9, 10, 11, 12],
... ]

The following list comprehension will transponse rows and columns:
>>> print([[row[i] for row in matrix] for i in range(4)])

In the previous section, the nested listcomp is evalutaed in the context of the for that follows it, 
so this example is equivalent to:
>>> transposed = []
>>> for i in range(4):
...     transposed.append([row[i] for row in matrix])
...
>>> print(transposed)

In the real world, you should prefer built-in functions to comples flow statements. The zip() function would do a 
great job for this use case
>>> print(list(zip(*matrix)))


5.2. The del statement

There is a way to remove an item from a list given its index index instead of its value: the del statement. This differs
from  the pop() method which returns value. The del statement can also be used to remove slices from a list or clear 
the enitre list.
>>> a = [-1, 1, 66.25, 333, 333, 1234.5]
>>> print(a)
>>> del a[0]
>>> print(a)
>>> del a[2:4]
>>> print(a)
>>> del a[:]
>>> print(a)

del can also be used to delete entire variables
>> del a


5.3. Tuples and Sequences

We saw that lists and strings have many common properties, such as indexing and slicing operations. Since Python is an 
evolving language, other sequence data types may be added. There is also another stantard sequence data type: the tuple.

A tuple consists of a number of value seqparated by commas.
>>> t = 12345, 54321, 'hello!'
>>> print(t[0])
>>> print(t)

>>> # Tuples may be nested
... u = t, (1, 2, 3, 4, 5)
>>> print(u)

>>> # Tuples are immutable

As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; 
they may be input with or without surrounding parentheses, although often parentheses are necessary anyway.
It is not possible to assign to the individual items of a tuple, however it is possible to create tuples which 
contain mutable objects, such as lists.

Though tuples may seem similar to list, they are often used in different situations and for different purposes. 
Tuples are immutable, and usually contain a heterogeneous sequence of elements that are accessed via unpacking
or indexing. Lists are mutable, and their elements are usually homegeneous and are accessed by iterating over the list.

A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to 
accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is 
constructed by following a value with a comma.


5.4. Sets

Python also includes a data type for sets. A set is an unordered collection with no duplicate elements. Basic uses 
include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like 
union, intersection, difference, and symmetric difference.

Curly braces or the set() function can be used to create sets. Note: to create an empty set you have to use set(), 
not {}; the latter creates an empty dictionary, a data structure that we discuss in the next section.

>>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
>>> print(basket)

>>> a = set('abracadabra')
>>> b = set('alacazam')
>>> print(a)
>>> print(b)

# letters in a but not in b
>>> print(a - b)

# letters in a or b or both
>>> print(a | b)

# letters in both a and b
>>> print(a & b)

# letters in  a or b but not both
>>> print(a ^ b)

similary to list comprehensions, set comprehensions are alos supported
>>> a = {x for x in 'abracadabra' if x not in 'abc'}
>>> print(a)


5.5 Dictionaries

Another useful data type built into Python is the dictionary. Dictionaries are 
sometimes found in other languages as "associative memories" or "associative arrays". Unlike sequences, which 
are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable bype; strings 
and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if 
a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can't use lists as 
keys, since lists can be modified in place using index assignments, slice assignments, or methods like append() 
and extend().

It is best to think of a dictionary as a set of key:value pairs, with the requirement that the keys are unique. 
A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the 
braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output.

The main operations on a dictionary are storing a value with some key and exracting the value given the key. It 
is also possible to delete a key:value pair with del. If you store using a key that is already in use, the old value
associated with that key is forgotten. It is an error to extract a value using a non-existent key. 

Performing list(d) on a dictionary returns a list of all the keys used in the dictionary, in insertion order (if you 
want it sorted, just use sorted(d) instead). To check whether a single key is in the dictionary, use the in keyword.

>>> tel = {'jack': 4098, 'sape': 4139}
>>> tel['guido'] = 4127
>>> print(tel)
>>> del tel['sape']
>>> tel['irv'] = 4127
>>> print(tel)
>>> print(list(tel))
>>> print(sorted(tel))

The dict() constructor builds dictionaries directly from sequences of key-value pairs:
>>> print(dict([('sape', 4139), ('guide', 4127), ('jack', 4098)]))

In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions:
>>> dic = {x: x**2 for x in (2, 4, 6)}
>>> print(dic)

When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:


5.6. Looping Techniques

When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the 
items() method.
>>> knights = {'gallahad':'the pure', 'robin':'the brave'}
>>> for k, v in knights.items():
...     print(k, v)
...

When looping through a sequence, the position index and corresponding value can be retrieved at the same time 
using the enumerate() function.
>>> for i, v in enumerate(['tic', 'tac', 'toe']):
...     print(i, v)

To loop over two or more sequences at the same time, the entries can be paired with the zip() function.
>>> questions = ['name', 'quest', 'favorite color']
>>> answers = ['lancelot', 'the holy grail', 'blue']
>>> for q, a in zip(questions, answers):
...     print('What is your {0}? It is {1}.'.format(q, a))

To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the reversed() 
function.
>>> for i in reversed(range(1, 10, 2)):
...     print(i)

To loop over a sequence in sorted order, use the sorted() function which returns a new sorted list while leaving 
the source unaltered.
>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
>>> for f in sorted(set(basket)):
...     print(f)

It is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safter to 
create a new list instead.
>>> import math
>>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
>>> filtered_data = []
>>> for value in raw_data:
...     if not math.isnan(value):
...         filtered_data.append(value)
...
>>> print(filtered_data)


5.7. More on Conditions

The conditions used in while and if statements can contain any operators, not just comparisons.

The comparison operators in and not in check whether a value occurs (does not occur) in a sequence. The 
operators is and is not compare whether two objects are really the same object; this only matters for mutable 
objects like lists. All comparison operators have the same priority, which is lower than that of all numerical 
operators.

Comparisons can be chained. For example, a < b == c tests whether a is less than b and moreover b equals c.

Comparisons may be combined using the Boolean operators and and or, and the outcome of a comparison (or 
of any other Boolean expression) may be negated with not. These have lower priorities than comparison 
operators; between them, not has the highest priority and or the lowest, so that A and not B or C is equivalent 
to (A and (not B)) or C. As always, parentheses can be used to express the desired composition.

The Boolean operators and and or are so-called short-circuit operators: their arguments are evaluated from left 
to right, and evaluation stops as soon as the outcome is determined. For example, if A and C are true but B is 
false, A and B and C does not evaluate the expression C. When used as a general value and not as a Boolean, 
the rturn value of a short-circuit operator is the last evaluated argument.

It is possible to assign the result of a comparison or other Boolean expression to a variable.


5.8. Comparing Sequences and Other Types

Sequence objects may be compared to other objects with the same sequence type. The comparison uses 
lexicographical ordering: first two items are compared, and if they differ this determines the outcome of 
the comparison; if they are equal, the next two items are compared, and so on, until either sequence is 
exhansted. If two items to be compared are themselves sequences of the same type, the lexicographical 
comparison is carried out recursively. If all items of two sequences compare equal, the sequences are
considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller
(lesser) one. Lexicographical ordering for strings uses the Unicode code point number to order individual
characters. 


