3. An Informal Introduction to Python


3.1. Using Python as a Calculator


3.1.1. Numbers

Division(/) always returns a float. To do floor division and get an integer result (discarding any fractional result) 
you can use the // opertor; to calculate the remainder you can use %

With Python, it is possible to use the ** operator to calculate powers.

If a variable is not "defined" (assigned a value), trying to use it will give you an error.


3.1.2. Strings

Besides numbers, Python can also manipulate strings, which can be expressed in several ways. They can be 
enclosed in single quotes (' ... ') or double quotes (" ... ") with the same result. \ can be used to escape quotes.
>>> print('"Isn\'t," they said.')

If you don't want characters prefaced by \ to be interpreted as special characters, you can use raw strings by 
adding an r before the first quote
>>> print(r'C:\some\name')

String literals can span multiple lines. One way is using triple-quotes:
""" ... """ or ''' ... '''

Strings can be concatenated (glued together) with the + operator, and repeated with *
>>> 3 * 'un' + 'ium'

Two or more string literals (i.e the ones enclosed between quotes) next to each other are automatically 
concatenated.
>>> 'Py' 'thon'

This only works with two literals though, not with variables or expressions.
If you want to concatenate variables or a variable and a literal, use +

Strings can be indexed (subscripted), with the first character having index 0. There is no separate character type; 
a character is simply a string of size one.

Indices may also be negative numbers, to start counting from the right.

In addition to indexing, slicing is also supported. While indexing is used to obtain individual characters, slicing 
allows you to obtain substring.

Python strings cannot be changed -- they are immutable.


3.1.3. Lists

Python knows a number of compound data types, used to group together other values. The most versatile is the 
list, which can be written as a list of comma-separated values (items) between square brackets. Lists might
contain items of different types, but usually the items all have the same type.


3.2. First Steps Towards Programming

>>> # Fibonacci series:
... # the sum of two elements defines the next
... a, b = 0, 1
>>> while a < 10:
...     print('number is:', a)
...     a, b = b, a+b
...

The keyword argument and can be used to avoid the newline after the output, or end the output with a 
different string:
>>> a, b = 0, 1
>>> while a < 1000:
...     print(a, end=',')
...     a, b = b, a+b

Footnotes
[1] Since ** has higher precedence than-, -3**2 will be interpreted as -(3**2) and thus result in -9. To avoid 
    this and get 9, you can use (-3)**2.

