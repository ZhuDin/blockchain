4 - Manipulating Files and Directories

At this point, we are ready for some real work! This chapter will introduce the following
commands:
  
  * cp - Copy files and directories
  * mv - Move/rename files and directories
  * mkdir - Create directories
  * rm - Remove files and directories
  * ln - Creata hard and symbolic links

These five commands are among the most frequently used Linux commands. They are 
used for manipulating both files and directories.

Now, to be frank, some of the tasks performed by these commands are more easily done
with a graphical file manager. With a file manager, we can drag and drop a file from one
directory to another, cut and paste files, delete files, and so on. So why use these old
command line programs?

The answer is power and flexibility. While it is easy to perform simple file manipulations
with a graphical file manager, complicated tasks can be easier with the command line
programs. For example, how could we copy all the HTML files from one directory to another
but only copy files that do not exist in the destination directory or are newer than the
versions in the destination directory? It's pretty hard with a file manager but pretty
easy with the command line.

cp -u *.html destination


Wildcards

Before we begin using our commands, we need to talk about a shell feature that makes 
these commands so powerful. Since the shell uses filenames so much, it provides special
characters to help us rapidly specify groups of filenames. These special characters are
called wildcards. Using wildcards (which is also known as globbing) allows us to select
filenames based on patterns of characters. Table 4-1 lists the wildcards and what they
select.

Table 4-1: Wildcards
Wildcard		Meaning
*			Matches any characters
?			Matches any single character
[characters]		Matches any character that is a member of the set characters
[!characters]		Matches any character that is not a member of the set characters
[[:class:]]		Matches any character that is a membe of the specified class

Table 4-2 lists the most commonly used character classes.

Table 4-2: Commonly Used Character Classes
Character Class		Meaning
[:alnum:]		Matches any alphanumeric character
[:alpha:]		Matches any alphabetic character
[:digit:]		Matches any numeral
[:lower:]		Matches any lowercase letter
[:upper:]		Matches any uppercase letter

Using wildcards makes it possible to construct sophisticated selection criteria for filenames.
Table 4-3 provides some examples of patterns and what they match.

Table 4-3:Wildcard Examples
Pattern				Matches
*				All files
g*				Any file beginning with "g"
b*.txt				Any file beginning with "b" followed by any characters
				  and ending with ".txt"
Data???				Any file beginning with "Data" followed by exactly
				  three characters
[abc]*				Any file beginning with either an "a", a "b", or a "c"
BACKUP.[0-9][0-9][0-9]		Any file beginning with "BACKUP." followed by exactly
				  three numerals
[[:upper:]]*			Any file beginning with an uppercase letter
[![:digit:]]*			Any file not beginning with a numeral
*[[:lower:]123]			Any file ending with a lowercase letter or the numerals
				  "1", "2", or "3"

Wildcards can be used with any command that accepts filenames as arguments, but we'll
talk more about that in Chapter 7, "Seeing the World As the Shell Sees It".

  Character Ranges

  If you are coming from another Unix-like environment or have been reading
  some other books on this subject, you may have encountered the [A-Z] and 
  [a-z] character range notations. These are trditional Unix notations and worked 
  in older versions of Linux as well. They can still work, but you have to be careful
  with them because they will not produce the expected results unless properly 
  comfigured. For now, you should avoid using them and use character classes instead.


  Wildcards Work in the GUI Too

  Wildcards are especially valuable not only because they are used so frequently on
  the command line, but because they are also supported by some graphical file
  managers.

  * In Nautilus (the file manager for GNOME), you can select files using the
    Edit/Select Pattern menu item. Just enter a file selection pattern with wildcards
    and the files in the currently viewed directory will be highlighted for selection.

  * In some versions of Dolphin and Konqueror (the file managers for KDE), you
    can enter wildcards directly on the location bar. For example, if you want to
    see all the files starting with a lowercase "u" in the /usr/bin directory, enter
    "/usr/bin/u*" in the location bar and it will display the result.

  Many ideas originally found in the command line interface make their way into
  the graphical interface, too. It is one of the many things that make the Linux 
  desktop so powerful.


mkdir - Create Directories

The mkdir command is used to create directories. It works like this:

mkdir directory...

A note on notation: When three periods follow an argument in the description of a command
(as above), it mean that the argument can be repeated, thus the following command:

mkdir dir1

would create a single directory maned dir1, while the following:

mkdir dir1 dir2 dir3

would create three directories named dir1, dir2, and dir3.


cp - Copy Files and Directories

The cp command copies files or directories. It can be used two different ways. The following:

cp item1 item2

copies the single file or directory item1 to the file or directory item2 and the follwing:

cp item... directory

copies multiple items(either files or directories) into a directory.


Useful Options and Examples

Table 4-4 lists some of the commonly used options for cp.

Table 4-4: Cp Options
Option	Long Option		Meaning
-a	--archive		Copy the files and directories and all of their attributes,
				  including ownerships and permissions. Normally, copies take
				  on the default attributes of the user performing the copy.
-i	--interactive		Before overwriting an existing file, prompt the user for
				  confirmation. If this option is not specified, cp will silently
				  (meaning there will be no warning) overwrite files.
-r	--recrusive		Recrusively copy directories and their contents. This option
				  (or the -a option) is required when copying directories.
-u	--update		When copying files from one directory to another, only copy
				  files that either don't exist or are newer than the existing 
				  corresponding files, in the destination directory. This is 
				  useful when copying large numbers of files as it skips file
				  that don't need to be copied.
-v	--verbose		Display informative messages as the copy is performed.

Table 4-5: cp Examples
Command			Results
cp file1 file2		Copy file1 to file2. If file2 exists, it is overwritten with the 
			  contents of file1. If file2 does not exist, it is created.
cp -i file1 file2	Same as previous command, except that if file2 exists, the user is
			  prompted before it is overwritten.
cp file1 file2 dir1	Copy file1 and file2 into directory dir1. The directory dir1 must
			  already exist.
cp dir1/* dir2		Using a wildcard, copy all the files in dir1 into dir2. The directory
			  dir2 must already exist.
cp -r dir1 dir2		Copy the contents of directory dir1 to directory dir2. If directory
			  dir2 does not exist, it is created and, after the copy, will contain
			  the same contents as directory dir1. If directory dir2 does exist,
			  then directory dir1 (and its contents) will be copied into dir2.


mv - Move and Rename Files

The mv command perform both file moving and file renaming, depending on how it is 
used. In either case, the original filename no longer exists after the operation. mv is used 
in much the same way as cp, as shown here:

mv item1 item2

to move or rename the file or directory item1 to item2 or:

mv item... directory

to move one or more items from one directory to another.


Useful Options and Examples

mv shares many of the same options as cp as described in Table 4-6.

Table 4-6: mv Options
Option	Long Option		Meaning
-i	--interactive		Before overwiting an existing file, prompt the user for 
				  confirmation. If this option is not specified, mv will
				  silently overwrite files.
-u	--update		When moving files from one directory to another, only move
				  files that either don't exist, or are newer than the 
				  existing corresponding files in the destination directory.
-v	--verbose		Display informative messages as the move is performed.

Table 4-7 provides some examples of mv usage.

Table 4-7: mv Examples
Command			Results
mv file1 file2		Move file1 to file2. If file2 exists, it is overwritten with the 
			  comtents of file1. If file2 does not exits, it is created.
			  In either case, file1 ceases to exist.

mv -i file1 file2	Same as the previous command, except that if file2 exists, the user
			is prompted before it is overwritten.

mv file1 file2 dir1	Move file1 and file2 into directory dir1. The directory dir1 must
			already exist.

mv dir1 dir2		If directory dir2 does not exist, create directory dir2 and move
			the contents of directory dir1 into dir2 and delete directory dir1.
			If directory dir 2 does exist, move directory dir1 (and its contents)
			into directory dir2.


rm - Remove Fils and Directories

The rm command is used to remove(delete) files and directories, as shown here:

rm item...

where item is one or more files or directories.


Useful Options and Examples

Table 4-8 describes some of the common options for rm.

Table 4-8: rm Options
Option	Long Option		Meaning
-i	--interactive		Before deleting an existing file, prompt the user for
				confirmation. If this option is not specified, rm will
				silently delete files.

-r	--recursive		Recursively delete directories. This means that if a 
				diretory being deleted has subdirectories, delete them
				too. To delete a directory, this option must be specified.

-f	--force			Ignore nonexistent files and do not prompt. This overrides 
				the --interactive option.

-v	--verbose		Display informative messages as the deletion is performed.

Table 4-9 provides some examples of using the rm command.

Table 4-9: rm Examples
Command			Results
rm file1		Delete file1 silently.

rm -i file1		Same as the previous command, except that the user is prompted for
			confirmation before the deletion is performed.

rm -r file1 dir1	Delete file1 and dir1 and its contents.

rm -rf file1 dir1	Same as the previous command, except that is either file1 or dir1
			do not exist, rm will continue silently.


  Be Careful with rm!

  Unix-like operating systems such as Linux do not have an undelete command.
  Once you delete something with rm, it's gone. Linux assumes you're smart and
  you know what you're doing.

  Here is a useful tip: whenever you use wildcards with rm (besides carefully
  checking your typing!), test the wildcard first with ls. This will let you see the
  files that will be deleted. Then press the up arrow key to recall the command and
  replace ls with rm.


ln - Create Links

The ln command is used to create either hard or symbolic links. It is used in one of two
ways. The following creates a hard link:

ln file link

The following create a symbolic link:

ln -s item link

to createe a symbolic link where item is either a file or directory.


Hard Links

Hard links are the original Unix way of creating links, compared to symbolic links, which
are more modern. By default, every file has a single hard link that gives the file its name.
When we create a hard link, we create an additional directory entry for a file. Hard links
have two important limitations:

  1. A hard link cannot reference a file outside its own file system. This means a link
     cannot reference a file that is not on the same disk partition as the link itself.

  2. A hard link may not reference a directory.

A hard link is indistinguishable from the file itself. Unlike a symbolic link, when we list a
directory containing a hard link we will see no special indication of the link. When a hard
link is deleted, the link is removed but the contents of the file itself continue to exist(that
is, its space is not deallocated) until all links to the file are deleted.

It is important to be aware of hard links because you might encounter them from time to
time, but modern practice prefers symbolic links, which we will cover next.


Symbolic Links

Symbolic links were created to overcome the limitations of hard links. Symbolic links
word by creating a special type of file that contains a text pointer to the referenced file or
directory. In this regard, they operate in much the same way as a Windows shortcut,
though of course they predate the Windows feature by many years.

A file pointed to by a symbolic link, and the symbolic link itself are largely indistinguishable
from one another. For example, if we write something to the symbolic link, the referenced
file is written to. However when we delete a symbolic link, only the link is deleted,
not the file itself. If the file is deleted before the symbolic link, the link will continue to
exist but will point to nothing. In this case, the link is said to be broken. In many 
implementations, the ls command will display broken links in a distinguishing color, such as
red, to reveal their presence.

The concept of links can seem confusing, but hang in there. We're going to try all this
stuff and it will, hopefully, become clear.


  Creating Symlinks With The GUI
  
  The file managers in both GNOME and KDE provide an easy and automatic
  method of creating symbolic links. With GNOME, holding the Ctrl+Shift keys
  while dragging a file will create a link rather than copying(or moving) the file. In
  KDE, a small menu appears whenever a file is dropped, offering a choice of copying,
  moving, or linking the file.


Summing Up

We've covered a lot of ground here and it will take a while for it all to fully shink in.
It is important to get a good understanding of basic file manipulation commands and wildcards.
The concept of links is a little confusing at first, but take the time to learn how they word.
They can be a real lifesaver.
 
