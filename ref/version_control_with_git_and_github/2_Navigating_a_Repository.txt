Navigating a Repository

GitHub offers features on a repository level. These features
provide an outlook of work and progress on a repository
by offering insights related to velocity, adherence to 
community standards, and utilization of a repository by the 
community.


Collaborators

GitHub supports adding and removing contributors to/from
a repository.


Exercise 10: Adding and Deleting Contributors

To add or remove contributors from a given repository, 
follow these steps:

1. Go to a repository on your account.

2. Click Settings and then click on Collaborators.

3. Search for a user by their email address, username, or
   full name.

4. Select the resultant user and click Add collaborator as
   seen in the following screenshots.

   Note

   Once the user to whom you've sent an invite accepts the
   invite, they should be able to make contributions to hte 
   repository. 

Outcome

You have successfully added contributors to a given repository.


Navigating Branches, Commits, and Insights (Contributors, Pulse, Forks)

Branches can be viewed and deleted in line with house
keeping processes. This can be done by going to the repository
on your account. Next, you have to click the
Forked 1 Branch buttton on the top bar to view a list of
branches. Then, you should be directed to a page with an
overview of the branches present on a repository.

Commits present the state of a repository at the time of 
their creation. You can browse a repository at a commit's
point in history and explore files that have been altered
by a commit. Then, go to a repository on your account,
and click the 1 commit icon to view the commits on a 
repository. In order to view file alterations on a commit, click
the commit hash.

Then, to browse the state of a repository at a given point
in time, click the double arrow icon. This can be found
on the far right of each commit that's listed. Lastly, you
can observe commits that have been organized in order of
the respective contributors. This plays an impertive role
of coordinating matters such as knowledge sharing across
teams by leveraging the different strengths of the 
contributors. On a repository of your choice, click Insights
and then click Contributors to view the contributors,
along with details of the specific contributions.


GitHub Etiquette

A certain decorum is expected of repositories and users in
using Version control and collaborating on GitHub. This
propriety ensures that contributions are carried out in an
orderly manner and promotes constructive working environments
that focus on delivering value.

GitHub provides a checklist through a Community profile
that can be accessed through the Insights tab of a repository
navigation.


Repository Names, Tags, and Descriptions

Take a look at the following definitions:


Names

A repository should bear a descriptive name that reltes to
the functionality an application seeks to deliver.


Tags

These are used for the purpose of identifying specific 
significant points on a repository's history, for example,
software releases, Git supports the creation of markers, 
referred to as tags, to correspond to software versions.

Tags are of two types: lightweight and annotated.

Lightweight tags act as pointers to a specific commit. It
only stores the reference to the commit:

git tag v2.5

Annotated tags act as pointers to a specific commit and 
additionally store information about the creator of the tag,
the email, and date of creation:

git tag -a v2.6 -m "Support sdk version 3"

Tags shall be further covered in detail later in this book.


Descriptions

A repository description is required as a best practice. This 
serves as the first point of introduction and sets the basis
on which a repository's functionality is understood.

Adding a Description

This is done by clicking the Add button to the right of 
Description on the Community profile and then adding the
description and clicking Save.


README.md

This document provides a brief on the project handled by
a repository. It encompasses a getting started guide, references
to wikis, and conduct and contribution guidelines.

Adding a README.md, CODE_OF_CONDUCT.md and CONTRIBUTING.md

This is achieved by clicking the Add button to the right of 
README on the community profile. From here, you
should add the necessary details and commit the changes.

This file will be altered as we add features to our application
throughout the book.

Then, click the add button to the right of Code of conduct
on the Community profile. Next, select a preferred code of
conduct guidd.

Then, commit the document to your repository.

Next, click the Add button to the right of Contributing on
the Community profile. Lastly, you may commit the document 
and alter it to fit your project.


LICENSE

A license governs the utilization of an application by its
users by dictating the obligations and responsibilities of
the creator and user of a software application.

Licenses are applicable, for example, in averting a creator
from indemnifying a user when an application is used contrary
to its terms of use.


Exercise 11: Adding Licenses

To add the appropriate license to the document, follow
these steps:

0. Open your repository, choose Insights table.

1. Click the Add button to the right of License on the 
   Community profile.

2. Choose a preferred license. In this case, we shall choose 
   the MIT License.

3. Click Review and submit once you have finished reviewing 
   the document.

4. Commit the document. You can alter this document to
   fit your project.

Outcome

You have successfully added the MIT license to a given 
repository.


Wikis and Issues

Take a look at the following definitions:


Wiki

Wikis provide an avenue for documenting processes and
guides for the usage of a certain piece of software.

You can use wikis to document conventions that should be 
applied in creating branches, reporting issues, and making
feature requests.

To access and/or create wikis, use the Wiki button on the 
top navigation bar.

We shall use wikis to document best practices and conventions
for the application we will be building in this book.


Issues

GitHub issues are suitable in reporting challenges or bugs
that are encountered when using an application, as well
as in making feature requests. Issues aid in tracking tasks
that:

 * Need to be undertaken as part of a products roadmap
 * Respond to user requests and challenges reported

To facilitate the filing of issues, we need to create templates
that serves to ease the reporting process. You will
need to click the Add button to the right of Issues template
on the Community profile. Then, select the Bug report and 
Feature request templates.

By clicking the Propose changes button and Commit
changes thereafter to add the template to your repository,
you will be able to file the issue request.

Raising an Issue

This is easily achieved by selecting the Issue tab on the 
top repository navigation bar.

Then, click New issue to file an issue. On the next prompt,
select the appropriate issue type, for example, Bug report.
Lastly, you can provide details of your issue and click 
submit new issue to complete the process.


Activity 1: Creating a Repository

You have been instructed to build an application that 
enables its user to order food from a restaurant and have it
delivered. To commence this piece of work, you need to
build the application while leveraging version control. You
need to create a repository that will host the application.
This repository will be used to track task completion and
the deployment of the application.

To get started, you need to have the Git command-line tool
installed on your computer. Additionally you need to have
an account on https://github.com/ and be logged into your
account on Github:

1. Launch the Terminal.

2. Create a directory named [dine-in] for the application
   and navigate to the dine-in directory.

3. Initialize the repository.

4. Go to https://github.com/ to create a new repository
   with the name dine-in.

5. Obtain the HTTPS or SSH URL of the repository from
   GitHub.

6. Set the remote URL on the local repository:

   git remote add origin [URL]

7. Create a README file and a .gitignore file, both of
   which are going to be added to the index.

8. Commit the files and then push them to the remote
   repository:

   git push -u origin master


Outcome

You have successfully created a repository on your GitHub
account with README.md and .gitignore files

Note 

For detailed of this activity, refer to the Appendix section.

Logistics

Conduct a recap of the concepts that have been covered in 
this topic.


Summary 

In this chapter, we defined version control and the various
types of workflows that are used. Then, we looked at what
Git and GitHub are, and how they relate to each other. Last,
but not least, we reated a repository on GitHub, cloned it,
and initialized a repository on a local environment before
uploading (pushing) it to GitHub. Basic building blocks
of version control and the application context were also
introduced.

In the next chapter, you will finally see how to version
commits and file stages to track file increments. You will
also raise a pull request and merge it to the primary branch
of a repository.

