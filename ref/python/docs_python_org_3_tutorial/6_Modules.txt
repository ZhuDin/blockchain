6. Modules

If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) 
are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editior to
prepare the input for the interpreter and running it with that file as input instead. This is known as creating a 
script. As your program gets longer, you may want to  split it into several files for easier maintenance. You may also 
want to use a handy function that you've written in several programs without copying its definition into each program.

To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance 
of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules
or into the main module.

A module is a file containing Python definitions and statements. The file name is the module name with the sufficx.py 
appended. Whithin a module, the module's name (as a string) is available as the value of the global variable
__name__.


6.1. More on Modules

A module can contain executable statements as well as function definitions. These statements are inteneded to 
initialize the module. They are executed only the first time the module name is encountered in an import statement.

Each module has its own private symbol table, which is used as the global symbol table by all functions defined in 
the module. Thus, the author of a module can use global variables in the module without worrying about accidental 
clashes with a user's global variables. On the other hand, if you know what you are doing you can touch a module's 
global variables with the same notation used to refer to its functions, modname.itemname.

Modules can import other modules. It is customary but not required to place all import statements at the beginning 
of a module (or script, for that matter). They imported module names are placed in the importing module's
global symbol table.

There is a variant of the import statement that imports names from a module directly into the importing module's 
symbol table.


6.1.1. Executing modules as scripts


6.1.2. The Module Search Path


6.1.3. "Compiled" Python files


6.2. Standard Modules

Python comes with a library of standard modules, described in a separate document, the Python Library Reference 
(Library Reference hereafter). Some modules are built into the interpreter; these provide access to operations 
that are not part of the core of the language but are nevertheless built in, either for efficiency or to provide 
access to operating system primitives such as system calls. The set of such modules is a configuration option 
which also depends on the underlying platform.


6.3. The dir() Function

The built-in function dir() is used to find out which names a module defines It returns a sorted list of strings.


6.4. Packages

Packages are a way of structuring Python's module namespace by using "dotted module names". 


6.4.1. Importing * From a Package


6.4.2. Intra-package References

When packages are structured into subpackages, you can use absolute imports to refer to submodules of siblings 
packages. You can also write relative imports, with the from module import name form of import statement.


6.4.3 Packages in Multiple Directories

Packages support one more special attribute, __path__. This is initialized to be a list containing the name of the 
directory holding the package's __init__.py before the code in that file is executed. This variable can be modified; 
doing so affects future searches for modules and subpackages contained in the package.

While this feature is not often needed, it can be used to extend the set of modules found in a package.

