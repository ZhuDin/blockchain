8. Errors and Exceptions

There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.


8.1. Syntax Errors

Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you 
are still learning Python.

The parser repeats the offending line and displays a litter 'arrow' pointing at the earliest point in the line where 
the error was detected. The error is caused by (or at least detected at) the token preceding the arrow: in the 
example, the error is detected at the function print(), since a colon (':') is missing before it. File name and line 
number are printed so you know where to look in case the input came from a script.


8.2 Exceptions

Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to 
execute it. Errors detected during execution are called exceptions and are not uncoditionally fatal: you will 
soon learn how to handle them in Python programs. Most exceptions are not hadnled by programs, however, and 
result in error messages as shown here.


8.3 Handling Exceptions

The try statement works as follows
  
  * First, the try clause (the statement(s) between the try and except keywords) is executed.
  * If no exception eccurs, the except clause is skipped and execution of the try statement is finished.
  * If an exception occurs during execution of the try clause, the rest of the clause is skipped. Then if its 
    type matches the execption named after the execpt keyword, the except clause is executed, and then execution 
    continues after the try statement.
  * If an exception occurs which does not match the exception named in the except clause, it is passed on to 
    outer try statments; if no handler is found, it is an unhandled exception and execution stops with a 
    message as shown above.

A try statement may have more than one except clause, to specify handlers for different exceptions. At most 
one handler will be executed. Handlers only handle exceptions that occur in the corresponding try clause, not in 
other handlers of the same try statement. An except clause may name multiple exceptions as a parenthesized tuple.

A class in an except clause is compatible with an exception if it is the same class or a base class thereof (but not 
the other way around -- an except clause listing a derived class is not compatible with a base class).


8.4. Raising Exceptions

The raise statement allows the programmer to force a specified exception to occur.

The sole argument to raise indicates the exception to be raised. This must be either an exception instance or an 
exception class (a class that derives from Exception). If an exception class is passed, it will be implicitly 
instantiated by calling its constructor with no arguments.


8.5. User-defined Exceptions

Programs may name their own exceptions by creating a new exception class. Exceptions should typically be derived 
from the Exception class, either directly or indirectly.

Exception classes can be defined which do anything any other calss can do, but are usually kept simple, often 
only offering a number of attributes that allow information about the error to be extracted by handlers for the 
exception. When creating a module that can raise several distinct errors, a common practice is to create a base 
class for exceptions defined by that module, and subclass that to create specific exception classes for different
error conditions.


8.6. Defining Clean-up Actions

The try statement has another optional clause which is intended to define clean-up actions that must be 
executed under all circumstances.

A finally clause is always executed before leaving the try statement, whether an exception has occurred or not.

In real world applications, the finally clause is useful for releasing external resources, regardless of
whether the use of the resource was successful.


8.7. Predefined Clean-up Actions

Some objects define standard clean-up actions to be undertaken when the object is no longer needed, 
regardless of whether or not the operation using the object succeeded or failed.

The with statement allows objects like files to be used in a way that ensures they are always cleaned up
promptly and correctly.

