11. Brief Tour of the Standard Library -- Part II

This second tour covers more advanced modules that support professional programming needs. These modules 
rarely occur in small scripts.


11.1 Output Formatting

The reprlib module provides a version of repr() customized for abbreviated displays of large of deeply nested
containers.


11.2. Templating

The string module includes a versatile Template class with a simplified syntax suitable for editing by end-user.
This allows users to customize their applications without having to alter the application.

The format uses placeholder names formed by $ with valid Python identifiers (alphanumeric characters and
underscores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with
no intervening spaces. Writting $$ creates a single escaped $.


11.3. Working with Binary Data Record Layouts

The struct module provides pack() and unpack() functions for working with variable length binary record
formats. The following example shows how to loop through header information in a ZIP file without using the
zipfile module. 


11.4. Multi-threading

Threading is a technique for decoupling tasks which are not sequentially dependent. Threads can be used to
improve the responsivenesss of applications that accept user input while other tasks run in the background. A
related use case is running I/O in parallel with computations in another thread.


11.5. Logging

The logging module offers a full featured and flexible logging system. At its simplest, log messages are sent to a
file or to sys.stderr.


11.6. Weak References

Python does automatic memory management (reference counting for most objects and garbage collection to
eliminate cycle). The memory is freed shortly after the last reference to it has been eliminated.


11.7. Tools for Working with Lists

Many data structure needs can be met with the built-in list type. However, sometimes there is a need for
alternative implementations with different performance trade-offs.

The array module provides an array() object that is like a list that stores only homogeneous data and stores it
more compactly. 

The collections module provides a deque() object that is like a list with faster appends and pops from the left
side but slower lookups in the middle.


11.8. Decimal Floating Point Arithmetic

The decimal module offers a Decimal datatype for decimal floating point arithmetic. Compared to the built-in
float implementation of binary floating point, the class is especially helpful for

  * financial application and other uses which require exact decimal representation,
  * control over precision,,
  * control ver rounding to meet legal or regulatory requirements,
  * tracking of significant decimal places, or
  * applications where the user expects the results to match calculations done by hand.

