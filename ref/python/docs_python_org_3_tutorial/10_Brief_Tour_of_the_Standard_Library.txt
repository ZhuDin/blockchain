10. Brief Tour of the Standard Library


10.1. Operating System Interface

The os module provides dozens of functions for interacting with the operating system.

Be sure to use the import os style instead of from os import *. This will keep os.open() from shadowing the
built-in open() function which operates much differently.

The built-in dir() and help() functions are useful as interactive aids for working with large modules like os:

For daily file and directory management tasks, the shutil module provides a higher level interface that is easier
to use.


10.2. File Wildcards

The glob module provides a function for making file lists from directory wildcard searches.


10.3. Command Line Arguments

Common utility scripts often need to process command line arguments. These arguments are stored in the sys
module's argv attribute as a list. 

The rgparse module provides a mechanism to process command line arguments. It should always be preferred
over directly processing sys.argv manually.


10.4. Error Output Redirection and Program Termination

The sys module also has attributes for stdin, stdout, and stderr. The latter is useful for emitting warnings and
error messages to make them visible even when stdout has been redirected.

The most direct way to terminate a script is to use sys.exit().


10.5. String Pattern Matching

The re module provides regular expression tools for advanced string processing. For complex matching and 
manipulation, regular expressions offer succinct, optimized solutions.

When only simple capabilities are needed, string methods are preferred because they are easier to read and
debug.


10.6. Mathematics

The math module gives access to the underlying C library functions for floating point math.

The random module provides tools for making random selections.

The statistics module calculates basic statistical properties (the mean, median, variance, etc. of numeric data.


10.7. Internet Access

There are a number of modules for accessing the internet and processing internet protocols. Two of the simplest
are rullib.request for retrieving data from URLs and smtplib for sending mail.


10.8. Dates and Times

The datetime module supplies classes for manipulating dates and times in both simple and complex ways. While
date and time arithmetic is supported, the focus of the implementation is on efficient member extraction for
output formatting and manipulation. The module also supports objects that are timezone aware.


10.9. Data Compression

Common data archiving and compression formats are directly supported by modules including: zlib, gzip, bz2,
lzma, zipfile and tarfile.


10.10. Performance Measurement

Some Python users develop a deep interest in knowing the relative performance of didfferent approaches to the 
same problem. Python provides a measurement tool that answers those questions immediately.


10.11. Quality Control

One approach for developing high quality software is to write tests for each function as it is developed and to run
those tests frequently during the developement process.

The doctest module provides a tool for scanning a module and validating tests embedded in a progrm's
docstrings. Test construction is as simple as cutting-and-pasting a typical call along with its results into the
docstring. This improves the documentation by providing the user with an example and it allows the doctest 
module to make sure the code remains true to the documentation.

The unittest module is not as effortless as the doctest module, but it allows a more comprehensive set of test
to be maintained in a seqarate file.


10.12. Batteries Included

Python has a "batteries included" philosophy. This is best seen through the sophisticated and robust capabilities
of its larger packages

