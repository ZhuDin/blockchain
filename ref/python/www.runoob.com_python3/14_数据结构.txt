-Python3数据结构

--列表
Python中列表是可变的，这是它区别于字符串和元组的最重要的特点，一句话概括即：列表可以修改，而字符串和元组不能。

以下是Python中列表的方法：
方法		描述
list.append(x)	把一个元素添加到列表的结尾，相当于a[len(a):] = [x]。
list.extend(L)	通过添加指定列表的所有元素来扩充列表，相当于a[len(a):] = L。
list.insert(i,x)在指定位置插入一个元素。第一个参数是准备插入到其面前的那个元素的索引
list.remove(x)	删除列表中值为x的第一个元素。如果没有这样的元素，应付返回一个错误
list.pop([i])	从列表的指定位置移除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素即从列表中被移除。
list.clear()	移除列表中所有项，等于del a[:]。
list.index(x)	返回列表中第一个值为x的元素的索引。如果没有匹配的元素应付返回一个错误
list.count(x)	返回x在列表中出现的次数
list.sort()	对列表中的元素进行排序
list.reverse()	倒排列表中元素
list.copy()	返回列表的浅复制，等于a[:]。

--将列表当做堆栈使用
列表方法使得列表可以很方便的作为一个堆栈来使用，堆栈作为特定的数据结构，最先进入的元素最后一个被释放(后进先出)。用append()方法可以把一个元素添加到堆栈顶。用不指定索引的pop()方法可以把一个元素从堆栈顶释放出来。

--将列表当作队列使用
也可以把列表当做队列使用，只是在队列里第一加入的元素，第一个取出来；但是拿列表用作这样的目的效率不高。在列表的最后添加或者弹出元素速度快，然而在列表里插入或者从头部弹出速度却不快(因为所有其他的元素都得一个一个地移动)。

--列表推导式
列表推导式提供了序列创建列表的简单途径。通常应用程序将一些操作应用于某个序列的每个元素，用其获得的结果作为生成新列表的元素，或者根据确定的判定条件创建子序列。
每个列表推导式都在for之后跟一个表达式，然后有零到多个for或if子句。返回结果是一个根据表达式从其后的for和if上下文环境中生成出来的列表。如果希望表达式推导出一个元组，就必须使用括号。

--嵌套列表解析
Python的列表还可以嵌套。

--del语句
使用del语句可以从一个列表中依索引而不是值来删除一个元素。这与使用pop()返回一个值不同。可以用del语句从列表中删除一个切割，或清空整个列表。
也可以用del删除实体变量

--元组和序列
元组由若干逗号分隔的值组成。
元组在输出时总是有括号的，以便于正确表达嵌套结构。在输入时可能有或没有括号，不过括号通常是必须的。

--集合
集合是一个无序不重复元素的集。基本功能包括关系测试和消除重复元素。
可以用大括号({})创建集合。注意：如果要创建一个空集合，必须用set()而不是{}；后面创建一个空的字典。

--字典
另一个非常有用的Python内建数据类型是字典。
序列是以连续的整数为索引，与些不同的是，字典以关键字为索引，关键字可以是任意不可变类型，通常字符串或数值。
理解字典的最佳方式是把它看做无序的键=>值对集合。在同一个字典之内，关键字必须是互不相同。
一对大括号创建一个空的字典：{}。
构造函数dict()直接从键值对元组列表中构建字典。
此外，字典推导可以用来创建任意键和值的表达式词典。
如果关键字只是简单的字符串，使用关键字参数指定键值对更方便。

--遍历技巧
在字典中遍历时，关键字和对应的值可以使用items()方法同时解读出来。
在序列中遍历时，索引位置和对应值可以使用enumerate()函数同时得到。
同时遍历两个或更多的序列，可以使用zip()组合。
要反向遍历一个序列，首先指定这个序列，然而调用reversed()函数
要按顺序遍历一个序列，使用sorted()函数返回一个已排序的序列，并不修改原值。
