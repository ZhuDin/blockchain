-Python3 面向对象

--面向对象技术简介
类(Class)：用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。
方法：类中定义的函数。
类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
数据成员：类变量或实例变量用于处理类及其实例对象的相关的数据。
方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖(override)，也称为方法的重写。
局部变量：定义在方法中的变量，只作用于当前实例的类。
实例变量：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。
继承：即一个派生类(derived class)继承基类(base class)的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。
实例化：创建一个类的实例，类的具体对象。
对象：通过类定义的数据结构实例。对象包括两个数据成员(类变量和实例变量)和方法。

和其它编程语言相比，Python在尽可能不增加新的语法的语义的情况下加入了类机制。
Python中的类提供了面向对象编程的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以调用基类中的同名方法。
对象可以包含任意数量和类型的数据。

--类定义
语法格式如下：
class ClassName:
    <statement-1>
    .
    .
    .
    <statement-N>
类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。

--类对象
类对象支持两种操作：属性引用和实例化。
属性引用使用和Python中的所有的属性引用一样的标准语法：obj.name
类对象创建后，类命名空间中所有的命名都是有效属性名。
类有一个名为__init__()的特殊方法(构造方法)，该方法在类实例化时会自动调用。

---self代表类的实例，而非类
类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称，按照惯例它的名称是self
class Test:
    def prt(self:
	print(self)
	print(self.__class__)
t = Test()
t.prt()
以上实例执行结果为：
<__main__.Test object at 0x7f69633fa7f0>
<class '__main__.Test'>
从执行结果可以很明显的看出，self代表的是类的实例，代表当前对象的地址，而self.class则指向类
self不是python的关键字，换成其它字符串都可以正常执行。

--类的方法
在类的内部，使用def关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数self，且为第一个参数，self代表的是类的实例。

--继承
Python同样支持类的继承，如果一种语言不支持继承，类就没有什么意义。派生类的定义如想所示：
class DerivedClassName(BaseClassName1):
    <statement-1>
    .
    .
    .
    <statement-N>
需要注意圆括号中基类的顺序，若是基类中有相同的方法名，而在子类使用时未指定，python从左至右搜索即方法在子类中未找到时，从左至右查找基类中是否包含方法。
BaseClassName必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用
class DerivedClassName(modename.BaseClassName):

--多继承
Python同样有效的支持多继承形式。多继承的类定义形如下例：
class DerivedClassName(Base1,Base2,Base3):
    <statement-1>
    .
    .
    .
    <statement-N>
需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索即方法在子类中未找到时，从左到右查找父类中是否包含方法。

--方法重写
如果父类方法的功能不能满足需求，可在子类重写父类的方法。
super()函数是用于调用父类(超类)的一个方法

--类属性与方法

---类的私有属性
__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时self.__private_attrs。

---类的方法
在类的内部，使用def关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数self，且为第一个参数，self代表的是类的实例。self的名字冻是规定死的，也可以使用this，但是最好还是按照约定使用self。

---类的私有方法
__private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用，不能在类的外部调用。self.__private_methods。

---实例

---类的专有方法：
__init__:构造函数，在生成对象时调用
__del__:析构函数，释放对象时使用
__repr__:打印，转换
__setitem__:按照索引赋值
__getitem__:按照索引获取值
__len__:获得长度
__cmp__:比较运算
__call__:函数调用
__add__:加运算
__sub__:减运算
__mul__:乘运算
__truediv__:除运算
__mod__:求余运算
__pow__:乘方

---运算符重载
Python同样支持运算符重载，可以对类的专有方法进行重载



-Python3 标准库概览

--操作系统接口
os模块提供了与操作系统相关联的函数
建议使用import os风格而非from os import *。这样可以保证随操作系统不同而有所变化的os.open()不会覆盖内置函数open()。
在使用os这样的大型模块时内置的dir()和help()函数非常有用。
>>> import os
>>> dir(os)
<returns a list of all module functions>
>>> help(os)
<returns an extensive manual page created from the module's docstrings>

针对日常的文件和目录管理任务，:mod:shutil模块提供了一个易于使用的高级接口
>>> import shutil
>>> shutil.copyfile('data.db', 'archive.db')
>>> shutil.move('/build/executables', 'installdir')

--文件通配符
glob模块提供了一个函数用于从目录通配符搜索中生成文件列表：
>>> import glob
>>> glob.glob('*.py')
['primes.py', 'random.py', 'quote.py']

--命令行参数
通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于sys模块的argv变量。

--错误输出重定向和程序终止
sys还有stdin,stdout和stderr属性，即使在stdout被重定向时，后者也可以用于显示警告和错误信息
大多脚本的定向终止都使用"sys.exit()"

--字符串正则匹配
re模块为高级字符串处理提供了正则表达式工具。对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案。
如果只需要简单的功能，应该首先考虑字符串方法，因为它们非常简单，易于阅读和调试。

--数学
math模块为浮点运算提供了对底层C函数库的访问
random提供了生成随机数的工具。

--访问互联网
有几个模块用于访问互联网以及处理网络通信协议。其中最简单的两个是用于处理从urls接收的数据的urllib.request以及用于发送电子邮件的smtplib

--日期和时间
datetime模块为日期和时间处理同时提供了简单和复杂的方法。
支持日期的时间算法的同时，实现的重点放在更有效的处理和格式化输出。

--数据压缩
以下模块直接支持通用的数据打包和压缩格式：zlib,gzip,bz2,zipfile,以及tarfile

--性能度量
有些用户对解决同一问题的不同方法之间的性能差异很感兴趣。Python提供了一个度量工具，为这些问题提供了直接答案。
例如，使用元组封闭和拆封来交换元素看起来要比使用传统的方法要诱人的多，timeit证明了现代的方法更快一些。
相对于timeit的细粒度，:mod:profile和pstats模块提供了针对更大代码的时间度量工具。

--测试模块
开发高质量软件的方法之一是为每一个函数开发测试代码，并且在开发过程中经常进行测试
doctest模块提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试。
测试构造如同简单的将它的输出结果剪切并粘贴 到文档字符串中。
通过用户提供的例子，它强化了文档，允许doctest模块确认代码的结果是否与文档一致。
unittest模块不像doctest模块那么容易使用，不过它可以在一个独立的文件里提供一个更全面的测试集。


