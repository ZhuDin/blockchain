-Python3 错误和异常

--语法错误

--异常
异常以不同的类型出现，这些类型都作为信息的一部分打印出来
错误信息的前面部分显示了异常发生的上下文，并以调用栈的形式显示具体信息

--异常处理
try:
    statement
except Error:
    statement
else:
    statement
try语句按照如下方式工作：
首先，执行try子句(在关键字try和关键字except之间的语句)
如果没有异常发生，忽略except子句，try子句执行后结束。
如果在执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略。如果异常的类型和except之后 的名称相符，那么对应的except子句将被执行。最后执行try语句之后的代码。
如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。

一个try语句可能包含多个except子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。
处理程序将只针对对应的try子句中的异常进行处理，而不是其他的try的处理程序中的异常
一个except子句可以同时处理多个异常，这些异常被放在一个括号里成为一个元组，如：
except (RuntimeError, TypeError, NameError):
    pass
最后一个except子句可以忽略异常的名称，它将被当作通配符使用。

try except语句还有一个可选的else子句，如果使用这个子句，那么必须放在所有的except子句之后。这个子句将在try子句没有发生任何异常的时候执行。
使用else子句比把所有语句都放在try子句里面在好，这样可以避免一些意想不到的、而except又没有except又没有捕获的异常
异常处理并不仅仅处理那些直接发生在try子句中的异常，而且还能处理子句中调用的函数(甚至间接调用的函数)里抛出的异常。

--抛出异常
Python使用raise语句抛出一个指定的异常。
raise唯一的一个参数指定了要被抛出的异常。它必须是一个异常的实例或者是异常的类(敢就是Exception的子类)
如果只想知道是否抛出了一个异常，并不想去处理它，那么一个简单的raise语句就可以再次把它抛出

--用户自定义异常
可以通过创建一个新的异常类来拥有自己的异常。异常类继承自Exception类，可以直接继承，或者间接继承。

--定义清理行为
try语句还有另外一个可选的子句，它定义了无论在任何情况下都会执行的清理行为。
try:
    statement
finally:
    statement
不管try子句里面有没有发生异常，finally子句都会执行。

--预定义的清理行为
一些对象定义了标准的清理行为，无论系统是否成功的使用了它，一旦不需要它了，那么这个标准的清理行为就会执行
关键词with语句就可以保证诸如文件之类的对象在使用完之后一定会正确的执行他的清理方法

