7 - Seeing the World as the Shell Sees It

In this chapter we are going to look at some of the "magic" that occurs on the command
line when we press the Enter key. While we will examine several interesting and complex
features of the shell, we will do it with just one new command.

  * echo - Display a line of text


Expansion

Each time we type a command and press the Enter key, bash performs serveral substitutions
upon the text before it carries out our command. We have seen a couple of cases of
how a simple character sequence, for example *, can have a lot of meaning to the shell.
The process that makes this happen is called expansion. With expansion, we enter something
and it is expanded into something else before the shell acts upon it. To demonstrate
what we mean by this, let's take a look at the echo command. echo is a shell builtin that
performs a very simple task. It prints its text arguments on standard output.

$ echo this is a test

That's pretty straightforward. Any argument passed to echo gets displayed. 

As we recall from our work with wildcards, the * character means match any characters in
a filename, but what we didn't see in our original discussion was how the shell does that.
The simple answer is that the shell expands the * into something else before the echo 
command is executed. When the Enter key is pressed, the shell automatically expands any
qualifying hcaracters on the command line before the command is carried out, so the echo 
commad never saw the *, only its expanded result. Knowing this, we can see that echo behaved 
as expected.


Pathname Expansion

The mechanism by which wildcards work is called pathname expansion. If we try some
of the techniques that we employed in earlier chapters, we will see that they are really
expansions. 


  Pathname Expansion of Hidden Files
  
  As we know, filenames that begin with a period character are hidden. Pathname
  expansion also respects this ehavior. An expansion such as the following does
  not reveal hidden files.

  echo *

  It might appear at first glance that we could include hidden files in an expansion
  by starting the pattern with a leading period, like this:

  echo .*

  It almost works. However, if we examine the results closely, we will see that the
  name . and .. will also appear in the results. Because these names refer to the 
  current working directory and its parent directory, using this pattern will likely
  produce an incorrect result. We can see this if we try the following command:
  
  ls -d .* | less

  To better preform pathname expansion in this situation, we have to employ a 
  more specific pattern.

  echo .[!.]*

  This pattern expands into every filename that begins with only one period
  followed by any other characters. This will work correctly with most hidden files
  (though it still won't include filenames with multiple leading periods). The ls
  command with the -A option ("almost all") will provide a correct listing of 
  hidden files.

  ls -A


The Expansion

As we may recall from our introduction to the cd command, the tilde character (~) has a
special meaning. When used at the beginning of a word, it expands into the name of the
home directory of the named user or, if no user is named, the home directory of the
current user.

$ echo ~


Arithmetic Expansion

The shell allows arithmetic to be performed by expansion. This allows us to use the shell
prompt as a calculator.

Arithmetic expansion uses the following form:

$((expression))

where expression is an arithmetic expression consisting of values and arthmetic operators.

Arithmetic expansion supports only integers (whole numbers, no decimals) but can perform
quite a number of different operations. Table 7-1 describes a few of the suppported operators.

Table 7-1: Arithmethic Operators
Operator	Description
+		Addition
-		Subtraction
*		Multiplication
/		Division
%		Modulo, which simply means "remainder."
**		Exponentiation

Spaces are not significant in arithmetic expressions and expressions may be nested.


Brace Expansion

Perhaps the strangest expansion is called brace expansion. With it, we can create multiple
text strings from a pattern containing braces.

$ echo Front-{A,B,C}-Back
Front-A-Back Front-B-Back Front-C-Back

Patterns to be brace expanded may contain a leading portion calle a preamble and a
trailing portaion called a postscript. The brace expression itself may contain either a 
comma-separated list of strings or a range of integers or single characters. The pattern
may not contain unquoted whitespace. Here is a example using a range of integers:

$ echo Number_{1..5}
Number_1 Number_2 Number_3 Number_4 Number_5

In bash version 4.0 and newer, integers may also be zero-padded like so:

$ echo {01..15}
01 02 03 04 05 06 07 08 09 10 11 12 13 14 15

$ echo {001..15}
001 002 003 004 005 006 007 008 009 010 011 012 013 014 015

Here is range of letters in reverse order:

$ echo {Z..A}
Z Y X W V U T S R Q P O N M L K J I H G F E D C B A

Brace expansions may be nested.

$ echo a{A{1,2},B{3,4}}b
aA1b aA2b aB3b aB4b

So, what is this good for? The most common application is to make lists of files or 
directories to be created.

$ mkdir {2018..2019}-{01..12}
$ ls
2018-01  2018-05  2018-09  2019-01  2019-05  2019-09 
2018-02  2018-06  2018-10  2019-02  2019-06  2019-10
2018-03  2018-07  2018-11  2019-03  2019-07  2019-11
2018-04  2018-08  2018-12  2019-04  2019-08  2019-12


Parameter Expansion

We're going to touch only briefly on parameter expansion in this chapter, but we'll be
covering it extensively later. It's feature that is more useful in shell scripts than 
directly on the command line. Many of its capabilities have to do with the system's ability
to store small chunks of data and to give each chunk a name. Many such chunks, more properly
called variables, are available for our examination.

To see a list of available variable, try this:

$ printenv | less

You may have noticed that with other types of expansion, if we mistype a pattern the 
expansion will not take place, and the echo command will simply display the mistyped
pattern. 


Command Substitution

Command substitution allows us to use the output of a command as an expansion.

$ echo $(ls)

We are not limited to just simple commands. Entire pipelines can be used:

$ file $(ls -d /usr/bin/* | grep zip)

In this example, the results of the pipeline became the argument list of the file 
command.

There is an alternate syntax for command substitution in older shell programs that is also
supported in bash. It uses backquotes instead of the dollar sign and parenthese.

$ ls -l `which cp`


Quoting

Now that we've seen how many ways the shell can perform expansions, it's time to learn
how we can control it. Take for example the following:

$ echo this is a     test
this is a test

or this one:

$ echo The total is $100.00
The total is 00.00

In the first example, word-splitting by the shell removed extra whitespace from the echo
command's list of arguments. In the second example, parameter expansion substituted an
empty string for the value of $1 because it was an undefined variable. The shell provides
a mechanism called quoting to selectively suppress unwanted expansions.


Double Quotes

The first type of quoting we will look at is double quotes. If we place text inside double
quotes, all the special characters used by the shell lose their special meaning and are
treated as ordinary characters. The exceptions are $, \(backslash), and `(back-quote).
This means that word-splitting, pathname expansion, tilde expansion, and brace expansion
are suppressed, but parameter expansion, arithmetic expansion, and command substitution
are still carried out. Using double quotes, we can cope with filenames containing
embedded spaces. Say we were the unfortunate victim of a file called two words.txt.
If we tried to use this on the command line, word-splitting would cause this to be
treated as two separate arguments rather than the desired single argument.

By using double quotes, we stop the word-splitting and get the desired result; futher, we
can even repaire the damage.

$ ls -l "two words.txt"
$ mv "two words.txt" two_words.txt

There! Now we don't have to keep typing those pesky double quotes.

Remember, parameter expansion, arithmetic expansion, and command substitution still 
take place within double quotes.

$ echo "$USER $((2+2)) $(cal)"

We should take a moment to look at the effect of double quotes on command substitution.
First let's look a little deeper at how word splitting works.

By default, word-splitting looks for the presence of spaces, tabs, and newlines(linefeed
characters) and treats them as delimiters between words. This means unquoted spaces,
tabs, and newlines are not considered to be part of the text. They serve only as separators.
Since they separate the words into different arguments, our example command line contains
a command followed by distinct arguments. If we add double quotes:

$ echo "this is a     test"
this is a     test

word-splitting is suppressed and the embedded spaces are not treated as delimiters; rather
they become part of argument. Once the double quotes are added, our command line 
contains a command followed by a single argument.

The fact that newlines are considered delimiters by the word-splitting mechanism causes
an interesting, albeit subtle, effect on command substitution. 


Single Quotes

If we need to suppress all expansions, we use single quotes. 


Escaping Characters

Sometimes we want to quote only a single character. To do this, we can precede a character
with a backslash, which in this context is called the escape character. Ofthen this is
done inside double quotes to selectively prevent an exapnsion.

$ echo "The balance for user $USER is: \$5.00"
The balance for user root is: $5.00

It is also common to use escaping to eliminate the special meaning of a character in a 
filename.

To allow a backslash character to appear, escape it by typing \\. Note that within single
quotes, the backslash loses its special meaning and is treated as an ordinary character.


  Backslash Escape Sequences
  
  In addition to its role as the escape character, the backslash is also used as part of
  a notation to represent certain special characters called control codes. The first 32
  characters in the ASCII coding scheme are used to transmit commands to teletype-like
  devices. Some of these codes are familiar (tab, backspace, linefeed, and carriage 
  return), while others are not (null, end-of-transmission, and acknowledge).

  Escape Sequence	Meaning
  \a			Bell (an alert that causes the computer to beep)
  \b			Backspace
  \n			Newline. On Unix-like systems, this produces a linefeed.
  \r 			Carriage return
  \t			Tab

  The table above lists some of the common backslash escape sequences. The idea
  behind this representation using the backslash originated in the C programming
  language and has been adopted by many others, including the shell.

  Adding the -e option to echo will enable interpretation of escape sequences.
  You may also place them inside $' '. Here, using the sleep command, s simple
  program that just waits for the specified number of seconds and then exits, we
  can create a primitive countdown timer:
  
  sleep 10; echo -e "Time's up\a"

  We could also do this:
  
  sleep 10; echo "time's up" $'\a'


Summing Up

As we move forward with using the shell, we will find that expansions and quoting will
be used with increasing frequency, so it makes sense to get a good understanding of the
way they work. In fact, it could be argued that they are the most important subjects to
learn about the shell. Without a proper understanding of expansion, the shell will always
be a source of mystery and confusion, with much of its potential power wasted.

