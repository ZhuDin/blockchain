Unrecoverable Errors with panic!

Sometimes, bad things happen in your code, and there's nothing you can do about it. In these cases,
Rust has the panic! macro. When the panic! macro executes, your program will print a failure
message, unwind and clean up the stack, and then quit. This most commonly occurs when a bug of
some kind has been detected and it's not clear to the programmer how to handle the error.


  Unwinding the Stack or Aborting in Response to a Panic

  By default, when a panic occurs, the program starts unwinding, which means Rust walks back
  up the stack and cleans up the data form each function it encounters. But this walking back
  and cleanup is a lot of work. The alternative is to immediately abort, which ends the program
  without cleaning up. Memory that the program was using will then need to be cleaned up by
  the operating system. If in your project you need to make the resulting binary as small as
  possible, you can switch from unwinding to aboring upon a panic by adding panic = 'abort'
  to the appropriate [profile] sections in your Cargo.toml file. For example, if you want to
  abort on panic in release mode, add this:

  [profile.release]
  panic = 'abort'


Let's try calling panic! in a simple program:

 
