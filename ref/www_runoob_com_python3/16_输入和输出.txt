-Python3 输入和输出

--输出格式美化
Python两种输出值的方式：表达式语句和print()函数。
第三种方式是使用文件对象的write()方法，标准输出文件可以使用sys.stdout引用。
如果希望输出的形式更加多样，可以使用str.format()函数来格式化输出值。
如果希望将输出的值转成字符串，可以使用repr()或str()函数来实现。
str():函数返回一个用户易读的表达形式。
repr():产生一个解释器易读的表达形式。

--旧式字符串格式化
%操作符也可以实现字符串格式化。它将左边的参数作为类似sprintf()式的格式化字符串，而将右边的代入，然后返回格式化后的字符串。
因为str.format()比较新的函数，大多数的Python代码仍然使用%操作符。

--读取键盘输入
Python提供了input()内置函数从标准输入读入一行文本，默认的标准输入是键盘。
input可以接收一个Python表达式作为输入，并将运算结果返回。

--读和写文件
open()将会返回一个file对象，基本语法格式如下：
open(filename, mode)
filename：包含了要访问的文件名称的字符串值。
mode：决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。

不同模式打开文件的完全列表：
模式	描述
r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式
rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头	
r+	打开一个文件用于读写。文件指针将会放在文件的开头
rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头
w	打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件
wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件
w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件
wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件
a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。即新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入
ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。即新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入
a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写
ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写

--文件对象的方法
假设已创建子一个称为f的文件对象
f.read()
为了读取一个文件的内容，调用f.read(size)，这将读取一定数目的数据，然后作为字符串或字节对象返回。
size是一个可选的数字类型的参数。当size被忽略了或者为负，那么该文件的所有内容都将被读取并且返回。

f.readline()
f.readline()会从文件中读取单独的一行。换行符为'\n'。f.readline()如果返回一个空字符串，说明已经读取到最后一行。

f.readlines()
f.readlines()将返回该文件中包含的所有行。
如果设置可选参数sizehint，则读取指定长度的字节，并且将这些字节按行分割。

f.write()
f.write(string)将string写入到文件中，然后返回写入的字符数。
如果要写入一些不是字符串的东西，需要先进行转换。

f.tell()
f.tell()返回文件对象当前所处的位置，它是从文件开头开始算起的字节数。

f.seek()
如果要改变文件当前的位置，可能使用f.seek(offset,from_what)函数。
from_what的值，如果是0表示开头，如果是1表示当前位置，2表示文件的结尾。即：
seek(x,0):从起始位置即文件首行首字符开始移动x个字符
seek(x,1):表示从当前位置往后移动x个字符
seek(-x,2):表示从文件的结尾往前移动x个字符
from_what值为默认为0，即文件开头。

f.close()
在文本文件中，只会相对于起始位置进行定位。
当处理完一个文件后，调用f.close()来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。
当处理一个文件对象时，使用with关键字是非常好的方式。在结束后，它会帮助正确关闭文件。而且写起来也比try - finally语句块要简短。
文件对象还有其它方法，如isatty()和trucate()。

pickle模块
python的pickle模块实现了基本的数据序列和反序列化。
通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。
通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。
基本接口：
pickle.dump(obj,file,[,protocol])
有了pickle这个对象，就能对file以读取的形式打开：
x = pickle.load(file)
注解：从file中读取一个字符串，并将它重构为原来的python对象。
file:类文件对象，有read()和readline()接口。

