-Python3 正则表达式

正则表达式是一个特殊的字符序列，它能帮助检查一个字符串是否与某种模式匹配。
Python自1.5版本增加了re模块，它提供了Perl风格的正则表达式模式。
re模块使Python语言拥有全部的正则表达式功能。
compile函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。
re模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。

正则表达式(Regular Expression)是一种文本模式，包括普通字符和特殊字符。
正则表达式使用单个字符来描述、匹配一系列匹配某个句法规则的字符串。

正则表达式的使用，可以通过简单的办法来实现强大的功能。一个简单的示例:

^[0-9]+abc$

^为匹配输入字符串的开始位置
[0-9]+匹配多个数字，[0-9]匹配单个数字，+匹配一个或多个
abc$匹配字母abc并以abc结尾，$为匹配输入字符串的结束位置

非打印字符
字符	描述
\cx	匹配由x指明的控制字符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义
	'c'字符
\f	匹配一个换页符。等价于\x0c和\cL
\n	匹配一个换行符。等价于\x0a和\cJ
\r	匹配一个回车符。等价于\x0d和\cM
\s	匹配任何空白字符，包括空格、制表符、换页符。等价于[\f\n\r\t\v]。其中
	Unicode正则表达式会匹配全角空格符
\S	匹配任何非空白字符。等价于[^\f\n\r\t\v]
\t	匹配一个制表符。等价于\x09和\cl
\v	匹配一个垂直制表符。等价于\x0b和\cK

特殊字符
字符	描述
$	匹配输入字符串的结尾位置。如果设置了RegExp对象的Multiline属性，则$也匹配'\n'或'\r'。要匹配$字符
	本身，使用\$
()	标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，使用\
*	匹配前面的子表达式零次或多次。要匹配*字符，使用\*
+	匹配前面的子表达式一次或多次。要匹配+字符，使用\+
.	匹配除换行符\n之外的任何单字符。要匹配.使用\.
[	标记一个中括号表达式的开始。要匹配[，使用\[
?	匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配?字符，使用\?
\	将下一个字符标记为或特殊字符、或面折庭争字符、或向后引用、或八进制转义符
^	匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配^字符本身，
	使用\^
{	标记限定符表达式的开始。要匹配{，使用\{
|	指明两项之间的一个选择。要匹配|，使用\|

限定符
限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有*或+或?或{n}或{n,}或{n,m}共6种。
正则表达式的限定符有：
字符	描述
*	匹配前面的子表达式零次或多次
+	匹配前面的子表达式一次或多次
?	匹配前面的子表达式零次或一次
{n}	n是一个非负整数。匹配确定的n次。
{n,}	n是一个非负整数。至少匹配n次。
{n,m}	m和n均为非负整数，其中n <= m。最少匹配n次且最多匹配m次。

定位符
定位符使正则表达式固定到行首或行尾。
定位符用来描述字符串或单词的边界，^和$分别指字符串的开始与结束，\b描述单词的前或后边界，\B表示非单词边界。
正则表达式的定位符有：
字符	描述
^	匹配输入字符串开始的位置。如果设置了RegExp对象的Multiline属性，^还会与\n或\r之后的位置匹配
$	匹配输入字符串结尾的位置。如果设置了RegExp对象的Multiline属性，$还会与\n或\r之前的位置匹配
\b	匹配一个单词边界，即字与空格间的位置
\B	非单词边界匹配
注意：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，
因此不这允许诸如^*之类的表达式。
若要匹配一行文本开始处的文本，在正则表达式的开始使用^字符。不要将^的这种用法与中括号表达式内的用法混淆。
若要匹配一行文本结束处的文本，在正则表达式的结尾处使用$字符。

选择
用圆括号将所有选择括起来，相邻的选择项之间用|分隔。但用圆括号会使相关的匹配被缓存，可用?:放在第一个选项前
来消除这种副作用。
其中?:是非捕获元之一，还有两个非捕获元是?=和?!

反向引用


--re.math函数

re.math尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none
函数语法：

re.match(pattern, string, flags=0)

函数参数说明：
参数		描述
pattern		匹配的正则表达式
string		要匹配的字符串
flags		标志位，用于控制正则表达式的匹配方式

匹配成功re.match方法返回一个匹配的对象，否则返回None。
可以使用group(num)或groups()匹配对象函数来获取匹配表达式。

匹配对象方法	描述
group(num=0)	匹配的整个表达式的字符串，group()可以一次输入多个组号，在这种情况下它将返回
		一个包含那些组所对应值的元组。
groups()	返回一个包含所有小组字符串的元组，从1到所含的小组号。


re.search方法

re.search扫描整个字符串并返回第一个成功的匹配。

函数语法：

re.search(pattern, string, flags=0)

函数参数说明：
参数		描述
pattern		匹配的正则表达式
string		要匹配的字符串
flags		标志位，用于控制正则表达式的匹配方式

匹配成功re.search方法返回一个匹配的对象，否则返回None。
可以使用group(num)或groups()匹配对象函数来获取匹配表达式。

匹配对象方法	描述
group(num=0)	匹配的整个表达式的字符串，group()可以一次输入多个组号，这种情况下它将返回一个
		包含那些组所对应值的元组。
groups()	返回一个包含所有小组字符串的元组，从1到所含的小组号。


re.match与re.search的区别

re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None;
而re.search匹配整个字符串，直到找到一个匹配。


检索和替换

Python的re模块提供了re.sub用于替换字符串中的匹配项。语法：

re.sub(pattern, repl, string, count=0, flags=0)

参数：
* pattern:正则中的模式字符串
* repl:替换的字符串，也可为一个函数
* string:要被查找替换的原始字符串
* count:模式匹配后替换的最大次数，默认0表示替换所有的匹配
* flags:编译时用的匹配模式，数字形式

前三个为必选参数，后两个为可选参数


compile函数

compile函数用于编译正则表达式，生成一个正则表达式(Pattern)对象，供match()和search()这两个函数使用
语法格式为：

re.compile(pattern[, flags])

参数：
* pattern:一个字符串形式的正则表达式
* flags 可选，表示匹配模式，比如忽略大小写，多行模式等具体参数为：
    * re.l 忽略大小写
    * re.L 表示特殊字符集\w, \W, \b, \B, \s, \S依赖于当前环境
    * re.M 多行模式
    * re.S 即为'.'并且包括换行符在内的任意字符('.'不包括换行符)
    * re.U 表示特殊字符集\w, \W, \b, \B, \d, \D, \s, \S依赖于Unicode字符属性数据库
    * re.X 为了增加可读性，忽略空格和'#'后面的注释


findall

在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。
注意：match和search是匹配一次，而findall匹配所有。
语法格式为：

re.findall(string[, pos[, endpos]])

参数：
* string 待匹配的字符串
* pos 可选参数，指定字符串的起始位置，默认为0
* endpos 可选参数，指定字符串的结束位置，默认为t字符串的长度


re.finditer

和findall类似，在字符串中g找到正则表达式匹配的所有子串，并把它们作为一个t迭代器返回。

re.finditer(pattern, string, flags=0)

参数：
* pattern 匹配的正则表达式
* string 要匹配的字符串
* flags 标志位，用于控制正则表达式的匹配方式


re.split

split方法p按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：

re.split(pattern, string[, maxsplit=0, flags=0])

参数：
* pattern 匹配的正则表达式
* string 要匹配的字符串
* maxsplit 分隔次数，maxsplit=1分隔一次，默认为0，不限制次数
* flags 标志位，用于控制正则表达式的匹配方式


正则表达式对象


re.RegexObject

re.compile()返回RegexObject对象。


re.MatchObject

group()返回被RE匹配的字符串 
  * start() 返回匹配开始的位置
  * end() 返回匹配结束的位置
  * span() 返回一个元组，包含匹配(开始，结束)的位置


正则表达式修饰符 - 可选标志

正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可靠的标志。多个标志可以通过按位OR(|)来指定。

修饰符		描述
re.l		使s匹配对大小写不敏感
re.L		做本地化识别(local-aware)匹配
re.M		多行匹配，影响^和$
re.S		使.匹配包括换行在内的所有字符
re.U		根据Unicode字符集解析字符。这个标志影响\w, \W, \b, \B
re.X		该标志通过给予更灵活的格式以使于将正则表达式写得更易于理解


正则表达式模式

模式字符串使用特殊的语法来表示一个正则表达式
字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串
多数字母和数字前加一个反斜杠时会拥有不同的含义
标点符号只有被转义时才匹配自身，否则它们表示特殊的含义
反斜杠本身需要使用反斜杠转义
由于正则表达式通常都包含反斜杠，所有最好使用原始字符串来表示它们。模式元素(如r'\t',等价于\\t)匹配相应的特殊字符

下表列出了正则表达式s模式语法中的特殊元素。使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。
模式		描述
^		匹配字符串的开头
$		匹配字符串的末尾
.		匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符
[...]		用来表示一组字符，单独列出：[amk]匹配'a', 'm'或'k'
[^...]		不在[]中的字符:[^abc]匹配除了a, b, c之外的字符
re*		匹配0个或多个的表达式
re+		匹配1个或多个的表达式
re?		匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式
re{n}		匹配n个前面的表达式。例如，"o{2}"不能匹配"Bob"中的"o"，但是能匹配"food"中的两个o
re{n,}		精确匹配n个前面表达式。例如，"o{2,}"不能匹配"Bob"中的"o"，但能匹配"foooood"中的所有o。
		"o{1,}"等价于"o+"。"o{0,}"则等价于"o*"
re{n,m}		匹配n到m次由前面的正则表达式定义的片段，贪婪方式
a|b		匹配a或b
(re)		匹配括号内的表达式，也表示一个组
(?imx)		正则表达式包含三种可选标志：i, m, 或 x。只影响括号中的区域
(?-imx)		正则表达式关闭i, m, 或 x可选标志。只影响括号中的区域
(?:re)		类似(...),但是不表示一个组
(?imx:re)	在括号中使用i, m, 或 x 可选标志
(?-imx:re)	在括号中不使用i, m, 或 x 可选标志
(?#...)		注释
(?=re)		前向肯定界定符。
(?!re)		前面否定界定符。
\w		匹配数字字母下划线
\W		匹配非数字字母下划线
\s		匹配任意空白字符，等价于[\t\n\r\f]
\S		匹配任意非空字符
\d		匹配任意数字，等价于[0-9]
\D		匹配任意非数字
\A		匹配字符串开始
\Z		匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串
\G		匹配字符串结束
\b		匹配一个单词边界，也就是指单词和空格间的位置。
\B		匹配非单词边界
\n,\t,等	匹配一个换行符。匹配一个制表符t，等
\1...\9		匹配第n个分组的内容
\10		匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符k码的表达式

