-Python3 函数
函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。
函数能提高应用的模块性，和代码的重复利用率。

--定义一个函数
定义一个由自己想要功能的函数，以下是简单的规则：
函数代码块以def关键词开头，后接函数标识符名称和圆括号()。
任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。
函数的第一行语句可以选择性地使用文档字符串——用于存放函数说明。
函数内容以冒号起始，并且缩进。
return[表达式]结束函数，选择性地返回一个值给调用方。不带表达式的return相应于返回None。

--语法
Python定义函数使用def关键字，一般格式如下：
def 函数名(参数列表):
    函数体
默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。

--实例

--函数调用
定义一个函数：给了函数一个名称，指定了函数里包含的参数，和代码块结构。
这个函数的基本结构完成以后，可以通过另一个函数调用执行，也可以直接从Python命令提示符执行。

--参数传递
在python中，类型属于对象，变量是没有类型的：
如：a = [1,2,3] 或 a = "Runoob"
以上代码中，[1,2,3]是List类型，"Runoob"是String类型，而变量a是没有类型的，它仅仅是一个对象的引用(一个指针)，可以指向List类型对象，也可以指向String类型对象。

---可更改(mutable)与不可更改(immutable)对象
在python中，strings,tuples,和numbers是不可更改的对象，而list,dict等则是可以修改的对象。
不可变类型：变量赋值a=5后再赋值a=10，这里实际是新生成一个int值对象10，再让a指向它，而5被丢弃，相当于生成了a。
可变类型：变量赋值la=[1,2,3,4]后再赋值la[2]=5则是将list la的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。

python函数的参数传递：
不可变类型：类似c++的值传递，如整数、字符串、元组。如fun(a)，传递的只是a的值，没有影响a对象本身。
可变类型：类似c++的引用传递，如列表，字典。如fun(la)，则是将la真正的传过去，修改后fun外部的la也会受影响。

python中一切都是对象，严格意义我们不能说值传递还是引用传递，应该说传不可变对象和传可变对象。

--参数
以下是调用函数时可使用的正式参数类型：
必需参数
关键字参数
默认参数
不定长参数

---必需参数
必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。

---关键字参数
关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。
使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为Python解释器能够用参数名匹配参数值。

---默认参数
调用函数时，如果没有传递参数，则会使用默认参数。

---不定长参数
若需要一个函数能处理比当初声明时更多的参数时，这些参数叫做不定长参数，声明时不会命名。基本语法如下：
def functionname([formal_args,] *var_args_tuple):
    "函数_文档字符串"
    function_suite
    return [expression]

加了星号*的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。

还有一种就是参数带两个星号**基本语法如下：
def functionname([formal_args,] **var_args_dict):
    "函数_文档字符串"
    function_suite
    return [expression]

加了两个星号**的参数会以字典的形式导入。

声明函数时，参数中星号*可以单独出现，如果单独出现星号*后的参数必须用关键字传入。

--匿名函数
python使用lambda来创建匿名函数。
所谓匿名，意即不再使用def语句这样标准的形式定义一个函数。
lambda只是一个表达式，函数体比def简单很多。
lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封闭有限的逻辑进去。
lambda函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。
虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。

---语法
lambd函数的语法只包含一个语句，如下：
function = lambda [arg1 [,args,.....argn]]:expression

--return语句
return[表达式]语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。

--变量作用域
Python中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。
变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是：
L (Local)	局部作用域
E (Enclosing)	闭包函数外的函数中
G (Global)	全局作用域
B (Built-in)	内置作用域(内置函数所在模块的范围)

以L->E->G->B的规则查找，即：在局部找不到，便会去局部外的局部找，再找不到就会去全局找，再者去内置中找。

内置作用域是通过一个名为builtin的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。
在Python3中，可以使用以下代码来查看到底预定义了哪些变量：
import builtins
dir(builtins)

Python中只有模块(module)，类(class)以及函数(def、lambda)才会引入新的作用域，其它的代码块(如if/elif/else/、try/except、for/while等)是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问。

---全局变量和局部变量
定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局使用域。
局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的名称都将被加入一作用域中。

---global和nonlocal关键字
当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。
如果需要修改嵌套作用域(enclosing作用域，外层非全局作用域)中的变量则需要nonlocal关键字。

